[{"authors":[],"categories":[],"content":"漢語裏人們常常說沒飯吃是“喝西北風”，例如詞典中常舉的吳敬梓《儒林外傳》裏第四十一回的：“都像你這一毛不拔，我們喝西北風。”那爲什麼是喝西北風，不是喝東南風、西南風呢？網上常見的說法是這跟我國的氣候地形有關。我國冬季吹西伯利亞南下的西北風，而這時正值冬天，如果沒有儲備，就只能忍飢挨餓，所以叫喝西北風。這種說法沒有依據，更何況漢語裏很少說冬天沒有糧食吃。說到沒有糧食，一般都是青黃不接，是指的春季莊稼剛剛播種，尚未長成，而舊穀已經吃完了。\n事實上，喝西北風恐怕是有相當古老的來源的。《左傳·哀公十三年》吳王夫差黃池之會後，越人已經攻入吳國，而吳王仍在與晉國爭奪盟會的班次，甚至連吳國將士也沒有糧食。所以吳國的申叔儀就向魯國的公孫有山氏乞求糧食。公孫有山氏回覆說，精細的糧食就沒有了，粗劣的還有一些。並且讓申叔儀登上首山，大呼：“庚癸乎”，那他就會借糧食給申叔儀。\n“吳申叔儀乞糧於公孫有山氏，曰：‘佩玉繠兮，余無所繫之；旨酒一盛兮，余與褐之父睨之。’（公孫有山氏）對曰：‘粱則無矣，麤則有之。若登首山以呼曰，庚癸乎，则诺。’”\n爲什麼要讓申叔儀大呼“庚癸乎”呢？杜注說：“軍中不得出糧，故爲私隱。庚，西方，主穀。癸，北方，主水。”杜預的解釋是，在軍中不能出糧，所以要用隱祕的暗號；而之所以叫“庚癸”，則是因爲庚對應西方，代表糧食，癸對應北方，代表水。正義說：\n“庚在西方，穀以秋熟，故以庚主穀。癸在北方，居水之位，故以癸主水。言欲致飯并致飲也。”\n庚在西方，在四季中對應秋季，正是糧食成熟的季節，所以可以代表糧食；而癸在西方，在五行中對應水，所以用來代表水。大呼“庚癸乎”，就是暗示自己需要糧食和水。庚和癸分別對應西方和北方，如果把他們連起來，就是西北。現在人們在飢餓困窘的時候就會說“喝西北風”，正和申叔儀沒有糧食吃，而必須向魯國人借糧食的處境是一樣的。那爲什麼是風呢？這是因爲古人不僅將干支與五星、五行、四季對應，還跟八風、六律對應。《史記·律書》中說：\n廣莫風居北方……其於十母爲壬癸……癸之爲言揆也，言萬物可揆度……閶闔風居西方……其於十母爲庚辛。庚者，言陰氣庚萬物\n《淮南子·天文訓》也說：\n西方，金也，其帝少昊，其佐蓐收，執矩而治秋。其神為太白，其獸白虎，其音商，其日庚辛。北方，水也，其帝顓頊，其佐玄冥，執權而治冬。其神為辰星，其獸玄武，其音羽，其日壬癸。\n根據《淮南子》和《史記》中的說法，天干與五方、四季、五星、五行、八風的對應關係如下。由於季節只有四個，所以用四方來和戊己配，湊成五組；同時，戊己不跟四方對應，也就沒有與之對應的八風。\n天干 五星 五行 四方 四季 八風 甲乙 歲星 木 東方 春 明庶風 丙丁 熒惑 火 南方 夏 景風 戊己 鎮星 土 中央 四方 庚辛 太白 金 西方 秋 閶闔風 壬癸 辰星 水 北方 冬 廣莫風 所以，喝西北風應該是西風和北方，而不是西北風。古人可能很早就用與西北對應的天干來指代食物，兩漢之後干支在日常生活中的使用逐漸減少，人們就逐漸用方位來代替干支。而所謂飢者歌其食、勞者歌其事，人們在迫切需要食物的時候，更會呼喊食物，漸漸地“喝西北風”也就可以用來指沒飯吃了。\n","permalink":"https://ge-chunyu.github.io/posts/2024-12-xibeifeng/","series":[],"tags":[],"title":"爲什麼是“喝西北風”"},{"authors":[],"categories":[],"content":"Substitution in vim is very efficient, especially with the help of expressions. This is especially useful for calculations. I discovered this usage when I wanted to insert a list of numbers to the beginning of each line. But before go to the example, let’s take a look at expressions in vim substitution.\nThe expressions in vim are marked with “=”. This tells vim to treat the contents after “=” as expressions rather than literal texts. For example, vim will treat \\=1+1 as 2 rather than the text 1+1. Using \\=, I can insert numbers in the beginning of each line with expressions.\ns/^/\\=line(\u0026quot;.\u0026quot;)/ line(\u0026quot;.\u0026quot;) stands for the line number of the current line. I use ^ to capture the beginning of the line and add line numbers before each line and the output is:\n19text1 20text2 21text3 \\= can combine with printf() to achieve nicer output. To have a number before each line is good, but it looks better with a trailing dot and space . , so that it looks like a numbered list. I can do this with the following line.\ns/^/\\=printf(\u0026quot;%s. \u0026quot;, line(\u0026quot;.\u0026quot;))/ %s tells vim that there is a string, and the string is the following argument line(\u0026quot;.\u0026quot;), the line number of the current line. Also, there is a dot and a space . after the string. This gives the following output.\n33. text1 34. text2 35. text3 Vim can also do simple calculations with \\=. For example, sometimes I want to insert the relative line number rather than the absolute line number. To do that, I first enter the Visual mode with V, and select the lines I want to work with. Type the colon : in the commandline will give us :'\u0026lt;,'\u0026gt;. This shows that the operations will be done within the selected part. The line number of the first line under selection is line(\u0026quot;'\u0026lt;\u0026quot;), and the number of the last line is line(\u0026quot;'\u0026gt;\u0026quot;). Also, the line number of the current line is “line(”.\u0026quot;)\u0026quot;. Therefore, the relative line number of the current line is line(\u0026quot;.\u0026quot;)-line(\u0026quot;'\u0026lt;\u0026quot;)+1. I added 1 to the number because the first line should also be 1. The previous command is revised into:\ns/^/\\=printf(\u0026quot;%s. \u0026quot;, line(\u0026quot;.\u0026quot;)-line(\u0026quot;'\u0026lt;\u0026quot;))/ And the output is:\n1. text1 2. text2 3. text3 A tricky point in calculations in the expressions is that it cannot handle divisions, because the division sign / is the same as the separator / used in vim substitution. I can use # to surround the patterns that vim needs to findand put the substituted contents after the second #. For instance, I can divide the relative line numbers by 2, so that the line numbers would be 0, 1, 1, 2, 2, 3, 3…\ns#^#\\=printf(\u0026quot;%s. \u0026quot;, (line(\u0026quot;.\u0026quot;)-line(\u0026quot;'\u0026lt;\u0026quot;))/2) 0. text1 1. text2 1. text3 2. text4 2. text5 Now I know eough about expressions in vim substitutions, and I can go back to my original task to add numbers to the beginning of each line, and most importantly, I do not want the empty lines to interfere the numbering. So, what I have is:\ntext1 text2 text3 And what I want is:\n1. text1 2. text2 3. text3 Basic calculation can do that. I can divide the relative line numbers by 2 and add 1, and the command is:\ns#^.#\\=printf(\u0026quot;%s. \u0026quot;, (line('.')-line(\u0026quot;'\u0026lt;\u0026quot;))/2+1) Also, to capture the non-empty lines, I use ^.. That is to say, only add numbers on lines which have a character after the beginning of the line.\nHowever, the outputis like the following. Because with ^., I substituted the beginning of the line together with the first character!\n1. ext1 2. ext2 3. ext3 I have to add the first character back by submatch(0). submatch() returns matches from the pattern. With number 0, it returns the whole match, and with 1 to 9, it returns the first to the 9th submatch. So the command is:\ns#\\(^.\\)#\\=printf(\u0026quot;%s. %s\u0026quot;, (line('.')-line(\u0026quot;'\u0026lt;\u0026quot;))/2+1, submatch(0)) Ta-dah! Here is the result!\n1. text1 2. text2 3. text3 Useful links:\nVim Substitute Tricks ","permalink":"https://ge-chunyu.github.io/posts/2024-09-substitution-vim/","series":[],"tags":[],"title":"Substitution in Vim with expressions"},{"authors":[],"categories":[],"content":"I am learning vim and I want to migrate my workflow in Sublime Text to vim. One of the things I do most with Sublime Text is to write markdown files and convert them to pdf files using Pandoc. After some search, I did not find a satisfied plugin which does such a job. The vim-pandoc seems to be too powerful. I did some more search and found this post, which is very informative and I follow the instructions to create my own plugin to convert markdown files to pdf files using pandoc in vim.\nThe approach is quite straighforward. Pandoc as a commandline tool can be called within vim.\n:!pandoc '%' -o '%:r'.pdf The % represents the current file together with its path and %:r stands for the current file with the extension (i.e., .md in this case) stripped. However, type such a long command each time would be very time-consuming and annoying. To more conveniently call it, the command can be put in a vim compiler plugin.\nThe vim compiler plugin is put inside .vim/after/compiler and the compiler contains the following commands.\nlet current_compiler=\u0026quot;pandoc-md\u0026quot; CompilerSet makeprg=pandoc\\ -F\\ pandoc-crossref\\ --pdf-engine=xelatex\\ --metadata-file='~/Documents/notes/template/metadata.yaml'\\ -H\\ '~/Documents/notes/template/head.tex'\\ '%'\\ -o\\ ~/Documents/notes/pdf/'%:t:r'.pdf CompilerSet errorformat= First, I define a compiler named pandoc-md and then the command to run when calling :make in vim. The makeprg is very long and needs some explanation. All spaces in makeprg need to be escaped with a slash \\, just as in .vimrc when we define what to display on the statusline. Since my pdf files use customized layout, I also specified some metadata and a \\LaTeX template with the --metadata-file and -H flags. The paths of these files should be inside quotation marks.\nI don\u0026rsquo;t want to get pdf files with the names filename.md.pdf, so I use %:r.pdf to refer to the file name without the extension. Also, as I want to put all my pdf files in a pdf folder, I specified the folder in makeprg, but note that this path, unlike those of the metadata file and the \\LaTeX template, is not inside quotation marks.\nAnother thing is that I use :t to refer to the file name without the full path [^cmd-special]. Therefore, the resulting file would be put in the folder ~/Documents/notes/pdf.\nOne last thing is to create an autocmd to set the compiler for markdown files only. I put the following line in my .vimrc, so that each time I run :make each time within vim, the markdown file will be automatically converted to pdf files and stored in the specified folder.\nautocmd FileType markdown compiler pandoc-md A sidenote: Convert markdown files to pdf files in Sublime Text Sublime Text has a very convenient build system which I use to convert markdown files to pdf files. Click Tools on the toolbar and then to Build System and New Build System to create a new system. Put the following commands in the file and save it as Pandoc.sublime-build.\n{ \u0026quot;working_dir\u0026quot;: \u0026quot;~/Documents/notes/pdf\u0026quot;, \u0026quot;shell_cmd\u0026quot;: \u0026quot;pandoc -F pandoc-crossref --pdf-engine=xelatex --metadata-file='~/Documents/notes/template/metadata.yaml' -H \\\u0026quot;~/Documents/notes/template/head.tex\\\u0026quot; \\\u0026quot;$file\\\u0026quot; -o \\\u0026quot;$file_base_name.pdf\\\u0026quot; \u0026amp;\u0026amp; open -a Preview \\\u0026quot;$file_base_name.pdf\\\u0026quot;\u0026quot;, \u0026quot;selector\u0026quot;: \u0026quot;text.html.markdown\u0026quot;, \u0026quot;path\u0026quot;: \u0026quot;/usr/texbin:$PATH\u0026quot; } References and related posts Learn to Create a Vim Compiler Plugin From Pandoc to Batch Convert Markdown Files to HTML Compiling LaTeX Documents in a Vim-Based Workflow 用pandoc生成大型中文文档的痛点与解决方案 Customizing pdf output of Pandoc Writing academic papers using Sublime Text 3 + Pandoc ","permalink":"https://ge-chunyu.github.io/posts/2024-08-pandoc-vim/","series":[],"tags":[],"title":"Convert markdown files to pdf files using pandoc in vim"},{"authors":[],"categories":[],"content":"Preliminaries: The challenge of dynamic data Phonetics used to concern mostly with static data, such as VOT, formant values at vowel midpoint, or F0 at vowel onset. But as computers are getting more and more powerful, it is common (almost a necessity) to analyze dynamic data. For example, instead of F0 at vowel onset, pitch contour during the voiced parts needs to be analyzed, and similarly, formant trajectories are analyzed instead of formant values at vowel midpoints.\nThere are in general two main approaches to analyze dynamic data. The first approach is to decompose dynamic data into simpler parameters. For example, Discrete Cosine Transform (DCT) can decompose functions into multiple coefficients, among which $k_0$ is related to mean/intercept, $k_1$ to slope, and $k_2$ to (parabolic) curve. Another approach is to model the dynamics itself either using polynomials (linear models) or the addition of multiple base functions (additive models). Linear regression uses polynomials to model dynamic data, while generalized additive models employs the addition of multiple base functions.\nDifferent kinds of dynamic data Dynamic data can be divided into different types, according to its complexity. The following lists several common functions.\n$$\\text{Linear: }y = ax + b$$ $$\\text{Quadratic: }y = ax^2+bx+c$$ $$\\text{Cubic: }y = ax^3+bx^2+cx+d$$ $$\\text{Quartic: }y = ax^4+bx^3+cx^2+dx+e$$ $$\\text{Exponential: }y = e^x$$ $$\\text{Sine: }y = sin(x)$$\nLinear functions are the easiest to analyze, because only an intercept and a slope are needed to capture a linear function. Linear mixed-effects models can be used to analyze linear functions.\nQuadratic, cubic an quartic functions are more challenging, but an extension of linear mixed-effects models, Growth Curve Analysis (GCA, Mirman 2014) can be used to analyze such functions.\nExponential and sine functions, however, cannot be handled by GCA, because it cannot be decomposed into a linear component and non-linear components. However, some other statistical methods are able to model such non-linear data, including Generalized Additive Models (GAM) and Functional Data Analysis (FDA). In essence, GAM and FDA are the same in that they use the addition of basis functions to model complex curves.\nWorkflow of GAMM Fitting GAMM in R is achieved using the mgcv package and data visualization is usually achieved using the itsadug 1 package. GAMM can be fitted using the gam function, but more often it is fitted using bam for very large datasets.\nlibrary(mgcv) library(itsadug) The basic workflow of GAMM is as follows:\nCreate an ordered factor for the factors of interest Fit the model with gam() or bam() Handling autocorrelation errors Model criticism Visualization of results Significance testing The reason to change the factor into an ordered factor is that the constant difference (the parametric coefficients) and the non-linear difference can be distinguished (Wieling 2018:94). To do that, using the following code. Also, the factor needs to be changed into treatment coding.\ndata$factor \u0026lt;- as.ordered(data$factor) contrasts(data$factor) \u0026lt;- \u0026quot;contr.treatment\u0026quot; Another thing to note is that if several factors of interest are involved, it is not recommended to fit separate models for separate factors. A more informed solution is to construct a new variable based on the factors of interest (Wieling 2018:106). For example, if there are two factors of interest, tone and generation, the two factors can be combined to create a new factor toneGeneration using the following code. The function interaction() enables the order in the original factors to be preserved in the combined factor.\ndata$factor \u0026lt;- interaction(factor1, factor2) GAMMs can be fitted with formulae structures similar to those used in lme4. For parametric coefficients, simply include the factor, but for smooth factors, you need to surround the factors with s() (means the smooths) and some additional parameters need to be specified. Within each smooth, there are several things you can change. The parameter bs= specifies the types of basis spline functions, and it can take values such as tp (the default thin plate regression spline), cr (cubic regression spline). Another parameter k can be specifed and it stands for how many basis functions are needed. The default value of k is 10 and for pitch values within one syllable, there are usually only ten values, and k can be set to $9=10-1$.\nmodel \u0026lt;- bam(f0 ~ tone + # the parametric coefficient s(time) + # the smooth term s(time, by = factor) + # the smooth term by tone s(time, speaker, bs = \u0026quot;fs\u0026quot;, m = 1), # random smooth data = data, rho = rho1, # specify the autocorrelation error factor AR.start = data$start.event, discrete = TRUE) # use this to speed up model fitting GAMM, as the second M stands for mixed-effects, is also able to model random effects 2. Three types of random effects can be included, random intercept, random slope and random smooth. The formulae below shows the formalization in mgcv. As in fixed effects, bs stands for basis spline functions. re stands for random effects, and fs stands for factor smooth, in which a separate smooth is fitted for each level in the random factor. The nonlinear penalty is specified using the parameter m, and when it equals 1, it means that the first derivative is penalized.\ns(speaker, bs = \u0026quot;re\u0026quot;) # random intercept by speaker s(speaker, factor, bs = \u0026quot;re\u0026quot;) # random slope of tone by speaker s(time, speaker, bs = \u0026quot;fs\u0026quot;, m = 1) # random smooth of tone by speaker Of course, it is possible to fit smooth on two dimensions, and this is achieved by te() (a full tensor product) or ti() (a tensor product interaction) in the formulae. The third case study in Chuang et al. (2021) is a friendly hands-on tutorial on this kind of analysis.\nHandling autocorrelation One kind of error in time series data which is usually ignored is the autocorrelated error (Baayen et al. 2018). It refers to the correlation between the measuring points. Autocorrelated error can be visualized as a function of lag, i.e., the correlation between the present point with the previous n points. When lag is 0, it refers to the correlation of the point with itself and therefore is 1. When lag is 1, it refers to the correlation of the point with the immediately preceding point, and it is also called AR(1), the autocorrelated residual at lag 1. This is the value usually used in fitting GAMMs with autocorrelated errors taken into consideration, and it is called the AR1 error model.\nBefore specifying AR(1), the data should be revised to specify the starting point of each time series, using the start_event() function in itsadug.\ndata \u0026lt;- start_event(data, event= \u0026quot;factor\u0026quot;) After that, GAMM can be fitted on the data first without autocorrelated errors. This model can be used to get the AR(1) value and this value can be used to fit an AR1 error model with the same model structure as the previous one. AR1 error can be get using two functions, as shown in the following code. The value can then be fed into the gam() or bam() function by specifying the rho parameter.\nr1 \u0026lt;- start_value_rho(model) r1 \u0026lt;- acf_resid(model)[2] Model criticism Like linear models, GAMMs also need to check their residual values. The gam.check() function provides important dignosis information on the model. It generates four plots. The first plot is a normal quantile plot. This plot can be used to diagnose whether the model residuals follow a normal distribution. If the points all fall on the red line, it shows that the residuals follow a normal distribution. Sometimes, the residuals can have two heavy tails, suggesting a t-distribution. In this scenario, the data should be fitted instead with a scaled-t distribution, by specifying family=\u0026quot;scat\u0026quot; (Chuang et al. 2021:18). The histogram of residuals can also be used to help diagnose residual distribution.\nThe two scatter plots can be used to assess heteroscedasticity, which refers to the unequal variance depending on the values of the predictors or the ﬁtted values. If the variability is correlated with the predictors or fitted values, the homoscedasticity assumption is said to be violated.\nVisualization with GAMM The most popular way to visualize the data using GAMM is to plot the fit and the difference curve of the data. For the interaction of two numerical variable, heat map is also usually used. Visualization with GAMM is usually achieved using the itsadug package. It is also possible to extract the data and visualize it in ggplot2, which enables finer control over aesthetics and layout 3.\nGAMM results are usually visualized with smooth plots and difference curves. Smooth curves plot the model predicted smooths, while difference curves plot the difference between the curve of one level and the one of the reference level within a specific factor.\nThe plot_smooth() function in itsadug can be used to plot smooth curves, and the basic usage is exemplified as below. To plot the smooth curves, a GAMM object is needed and then you need to choose on which factor the smooth curves are on. The plot_allparameter specifies the factor you want to plot. Model summary can be printed with print.summary equals TRUE, and otherwise with FALSE. The random effects can be included by setting rm.ranef to FALSE, and removed by setting it to TRUE.\nplot_smooth(model, view = \u0026quot;time\u0026quot;, plot_all = \u0026quot;factor\u0026quot;, print.summary = FALSE, rm.ranef = FALSE) Apart from smooth curves, difference curves can also be plotted using the plot_diff() function. As plot_smooth(), a model and a smooth factor need to be specified, and it also requires a comparison factor. The comp parameter specifies which factor levels you want to coompare. The resultant figure is a curve with a horizontal zero line. If the shaded area (the 95% confidence interval) contains the zero line, then the difference can be said to be not significant, and otherwise, it is said to be significant.\nplot_diff(model, view = \u0026quot;time\u0026quot;, comp = list(factor = c(\u0026quot;level1\u0026quot;, \u0026quot;level2\u0026quot;)), print.summary = FALSE) These functions can also be used to get the data and to plot it in ggplot2 (of course, get model prediction is a better approach). The model fit data can be accessed using the following codes. Another alternative is to use functions in tidymv and a more recent tidygam package.\n# get model fit data fitData \u0026lt;- plot_smooth(model, view = \u0026quot;time\u0026quot;, plot_all = \u0026quot;factor\u0026quot;, print.summary = FALSE, rug = FALSE, rm.ranef = TRUE)$fv Significance testing with GAMM Factors can influence various aspects of dynamic data. Dynamic data can differ in intercept only, slope only, and also in the overall shape. Also, it is possible that curves can be different in some part but not in others. Although visualization provides a more straightforward way to interpret the results, significance testing is a necessity for confirmatory studies in particular. Significance testing with GAMM can be achieved by summary statistics, model comparison and visual methods.\nSóskuthy (2021) evaluated the random effect structures and significance testing in GAMM. Like all other models, GAMM results can be summarized with summary statistics. The summary of GAMM can be divided into two parts, the parametric coefficients showing the difference in intercept (overall height of the curve) and the smooth terms showing the difference in smooth. t-tests are used to get p-values for parametric coefficients, while F-tests are used for smooth terms. If there is a significant effect in parametric coefficients, it indicates that the curves are different in overall height due to predictors. On the other hand, if there is a significant effect in smooth terms, it is said that the curves have difference shapes due to predictors.\nApart from testing significance using model summaries, it is also possible to achieve it using model comparison. This can be done using the compareML() function in itsadug, which is the same in essence with the anova() function used to compare linear mixed-effects models.\nFurther reading Baayen, R. H., van Rij, J., de Cat, C., \u0026amp; Wood, S. (2018). Autocorrelated Errors in Experimental Data in the Language Sciences: Some Solutions Offered by Generalized Additive Mixed Models. In D. Speelman, K. Heylen, \u0026amp; D. Geeraerts (Eds.), Mixed-Effects Regression Models in Linguistics (pp. 49\u0026ndash;69). Springer International Publishing. https://doi.org/10.1007/978-3-319-69830-4_4\nIntroduces the problem of autocorrelated error in dynamic data analysis and provides a solution by including an autoregressive AR(1) process for the errors. The solution is to first fit a model without autocorrelation and get the autoregressive proportionality. It is specified using the rho parameter and another model is fitted with this parameter.\nChuang, Y.-Y., Fon, J., Papakyritsis, I., \u0026amp; Baayen, H. (2021). Analyzing Phonetic Data with Generalized Additive Mixed Models. In M. J. Ball (Ed.), Manual of Clinical Phonetics (1st ed., pp. 108\u0026ndash;138). Routledge. https://doi.org/10.4324/9780429320903-10\nProvides three case studies, which demonstrates the full capacity of GAMM in analyzing linguistic data.\nSóskuthy, M. (2021). Evaluating generalised additive mixed modelling strategies for dynamic speech analysis. Journal of Phonetics, 84, 101017.\\ https://doi.org/10.1016/j.wocn.2020.101017\nA critical paper on random effect structure and significance testing using GAMM.\nWieling, M. (2018). Analyzing dynamic phonetic data using generalized additive mixed modeling: A tutorial focusing on articulatory differences between L1 and L2 speakers of English. Journal of Phonetics, 70, 86\u0026ndash;116. https://doi.org/10.1016/j.wocn.2018.03.002\nA step-by-step hands-on tutorial of GAMM using phonetic data.\nWood, S. N. (2017). Generalized additive models: An introduction with R (Second edition). CRC Press/Taylor \u0026amp; Francis Group.\nA comprehensive book on Generalized additive models, with many mathematical and implementation details.\nvan Rij, J. (2015). Overview GAMM analysis of time series data.\\ https://jacolienvanrij.com/Tutorials/GAMM.html\nAn online tutorial by van Rij.\nSóskuthy, M. (2017). Generalised additive mixed models for dynamic analysis in linguistics: A practical introduction (arXiv:1703.05339). arXiv.\\ https://doi.org/10.48550/arXiv.1703.05339\nA preprint with more detailed guide on GAMM.\nvan Rij, J., Wieling, M., Baayen, R. H., \u0026amp; van Rijn, H. (2020). itsadug: Interpreting time series and autocorrelated data using GAMMs.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nSee the following paper for random effects in linear mixed-effects models: Barr, D. J., Levy, R., Scheepers, C., \u0026amp; Tily, H. J. (2013). Random effects structure for confirmatory hypothesis testing: Keep it maximal. Journal of Memory and Language, 68(3), 255\u0026ndash;278. https://doi.org/10.1016/j.jml.2012.11.001\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nSee also the following link on using tidymv to plot GAMM results: https://cran.r-project.org/web/packages/tidymv/vignettes/plot-smooths.html.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","permalink":"https://ge-chunyu.github.io/posts/2024-04-gamm/","series":[],"tags":[],"title":"A tutorial on generalized additive mixed-effects model (GAMM)"},{"authors":[],"categories":[],"content":"Digital data is easy to copy and also easy to lose, due to (usually sudden) failure of electronic devices. A good habit is to backup regularly and in different locations. This post is about my solution to data backup.\nClassification of digital data Digital data can be classified according to their importance and sizes, and the following lists some of the categories based on their importance.\nData that can be downloaded online Papers and e-books collected from various sources Personal photos and videos Experimental data and code Personal documents and writings Data that can be downloaded online is the lease important, since they can be easily accessed online and even it\u0026rsquo;s lost, it can be easily found online. Papers and e-books (or other resources) that are collected from various sources and clearly organized are more important. Some resources are hard to find, and once it is found, it\u0026rsquo;s better to keep it safe and have multiple copies. Personal photos and videos are even more important, to keep a record of ones\u0026rsquo;s life and happy memories.\nThe most important data are experimental data and code (related to work), and personal documents and writings (personal life). Experimental data can sometimes be very large, but code and personal documents and writings (and notes) are usually in plain text format and are far smaller in size. My solution to data backup is based on the importance of data and their sizes.\nMy solution to data backup Some say that it\u0026rsquo;s best to have two local backups, one online backup and one backup in another place. Of course, it\u0026rsquo;s not always possible to have them all. My Macbook Pro is the centre of all my data and the data are usually backup using Time Machine to a hard drive. I also have a SSD drive, which keeps a backup of large files, including paper and documents collected online, and personal photos and videos. Therefore, I have three local backups in total.\nFor experimental data and code, in addition to local backups, I also upload the data to Onedrive, with the service provided by my organization. It\u0026rsquo;s good for large data and very handy for sharing data with colleagues. I also use online backup for my notes. I previous use Nutstore to backup the writings and notes, but now it simply keeps another online copy for my notes and writings. I use rsync to sync these data to online locations. For example, my notes are synchronized to Onedrive using the following command.\nrsync -av --exclude-from '~/Documents/notes/ignore.txt' ~/Documents/notes/ ~/Documents/OneDrive/notes Some of my code are in github, and some data and scripts for my papers are uploaded to OSF. But these are used for sharing instead of backup.\nI use Syncthing to backup my personal documents and writings. Syncthing is a private and secure tool which synchronizes data among multiple devices. It is cross-platform and perfect for personal documents, writings and notes, which are usually small in size. I use Syncthing to synchronize these data across my MBP, my phone and the Raspberry Pi in my office. Syncthing can also backup the photos I take with my phone to my MBP.\nMy backup can be summarized as below,\nlocal MBP hard drive SSD drive phone (personal documents, writings and notes) using Syncthing Raspberry using Syncthing online Onedrive Nutstore github OSF ","permalink":"https://ge-chunyu.github.io/posts/2024-03-backup/","series":[],"tags":["Miscellaneous"],"title":"How I backup my data"},{"authors":[],"categories":[],"content":"東晉葛洪有《肘後備急方》，取其卷帙短小，可以繫於肘後，隨時查閱的意思。兩漢魏晉時候的人往往會將隨身攜帶的飾物、印章等繫於肘後。文獻中雖然例子不多，但仔細鉤稽，仍可以推測其彷彿。《世說新語·尤悔第三十三》第六條：\n王大將軍起事，丞相兄弟詣闕謝。周侯深憂諸王，始入，甚有憂色。丞相呼周侯曰：“百口委卿！”周直過不應。既入，苦相存救。既釋，周大說，飲酒。及出，諸王故在門。周曰：“今年殺諸賊奴，當取金印如斗大繫肘後。”大將軍至石頭，問丞相曰：“周侯可爲三公不？”丞相不答。又問：“可爲尚書令不？”又不應。因云：“如此，唯當殺之耳！”復默然。逮周侯被害，丞相後知周侯救己，歎曰：“我不殺周侯，周侯由我而死。幽冥中負此人！”\n這是王導不知道周覬雖然表面沒有好臉色，但其實在皇帝面前救護王氏，最終因循縱容導致周覬被王敦所殺的故事。周覬對王導說的“當取金印如斗大繫肘後”，說明當時的人有將印章繫在胳膊肘後面的習慣。周覬與葛洪是同時人，可見肘後的確是當時繫雜物，方便拿取之地。\n其實將印章等繫在肘後並不始於東晉，至少在西漢時候人們已經這樣做了。《急就篇》相傳是漢元帝時黃門令史游所作，其中第十四章：“係臂琅玕虎魄龍”，顏師古注說：“言以虎魄爲龍，并取琅玕，係著臂肘，取其媚好且珍貴也。”同章又有：“射鬾辟邪除羣凶”，顏師古注說：\n一曰，射鬾謂天剛卯也，以金玉及桃木刻而爲之，一名欬改，其上有銘，而旁穿孔，系以綵絲，用係臂焉，亦所以逐精魅也。\n也就是說“射鬾”也有人說是“天剛卯”，是金玉和桃木刻成的一種裝飾品，上面有銘文，並且穿孔系有彩色絲帶，可以繫在胳膊上，用來驅除妖怪的。這可見西漢時候的人已經有將物品繫在肘後的習慣了，而顏師古對此也不致陌生，足見此風至隋唐時期猶有緒餘。\n其實，將東西繫在胳膊肘後面，既不影響日常活動，又方便拿取，歷代恐怕都有這種風氣。2020 年以來，人人戴口罩。有時將口罩摘下，就會隨手套在胳膊上，正好在胳膊肘的位置。這也是“肘後備急”的當代應用了。\n","permalink":"https://ge-chunyu.github.io/posts/2023-11-zhouhou/","series":[],"tags":["Miscellaneous"],"title":"說“肘後”"},{"authors":[],"categories":[],"content":"It is very common for phoneticians to ask speakers to read aloud word lists, especially in the field. However, to find a word in a long sound file is very painful and a better solution is to split the long sound file into short files with meaningful file names. I wrote a Praat script for that purpose and to save some time, I also use the script to fill in the transcriptions to the TextGrid file. This post is a documentation of the script, which can be found in my github.\nPrerequisites A long sound file A metadata file of the wordlist which contains at least four columns word: the words or gloss, for your own reference label: the transcription of the words, to fill in the TextGrid file ID: the file name of each word, to rename the short sound files number: the number indicating the order of the word in the word list splitLongSound.praat: the Praat script to split the long sound file Procedures Open the Praat script (splitLongSound.praat) Input the required information and run the script. The required information include the directory of the long sound file the filename of the long sound file, and the extension (i.e., .wav) is not needed the directory to store the short sound files the directory of the matedata file ID of the speaker: it will be prefixed to the short file names vowel pattern: a regular expression of the pattern of vowel parts of the words Listen to the recording and add the number of the word for example, when you hear the first word, add the number 1 (because it's the first word in the list) after \u0026ldquo;sound\u0026rdquo; in the TextGrid The number column in the metadata file can be used here Note that \u0026ldquo;sound\u0026rdquo; cannot be deleted No need to modify any other texts and intervals in the TextGrid file But when the interval before or after the sound is too long and you want to trim it a little bit shorter, you can add a boundary before or after the sound Proceed to all the words and complete the sound file Click done and now all short sound files are saved You can also listen to some of the words and come back next time. The textgrid file is saved and can be read and revised in the future. You can click next time (no short sound file is saved) or done (only those with a number in the TextGrid will be saved)\nThere are two tiers in the short TextGrid files, \u0026ldquo;syllable\u0026rdquo; and \u0026ldquo;segment\u0026rdquo;. This script is especially useful for Chinese and other monosyllabic languages, with simple phonotactics. On the \u0026ldquo;syllable\u0026rdquo; tier, the transcriptions of the syllable will be automatically filled in, and on the \u0026ldquo;segment\u0026rdquo; tier, the onsets and vowels will be automatically segmented with corresponding transcriptions identified using the vowelPattern regular expression.\nAlso note that, if the long sound file has two channels (e.g., audio and EGG recordings), the second channel is also extracted separately and named with a suffix (-EGG) in the file. You can change this on line 123.\n","permalink":"https://ge-chunyu.github.io/posts/2023-09-pseudo-forced-alignment/","series":[],"tags":["Praat"],"title":"Pseudo forced alignment using a Praat script"},{"authors":[],"categories":[],"content":"Making a linguistic handout needs some tricks. Using MS word is not ideal because the output is not that beautiful and linguistic contents are not . In this post I explain how I make a linguistic handout with markdown and of course LaTeX.\nThe workflow I usually write documents using markdown and convert it to pdf using pandoc, as explained in my previous posts. I have a same head/template for all handouts, so that the style remains the same for a course. I use different LaTeX packages to format various linguistic contents.\nTools and LaTeX packages The following lists some of the packages I use to typeset linguistic contents.\ntikz-qtree: Draw syntactic trees and feature geometry linguex: Manage linguistic examples vowel: Draw vowel charts phonrule: Typeset phonological rules tipa: Input IPA TikZ: Draw various figures These packages are very convenient and easy to use, but some more explanation maybe better for more efficient use of them. tikz-qtree can easily draw syntax trees and feature geometry, but it does not provide a functionality for the delinking of linking lines. For such a case, I use some the tikz library positioning to add a equal symbol to the line.\n\\begin{tikzpicture} \\Tree[.+consonant [.\\node(l2){laryngeal}; \\node(a2){aspiration}; ] [.supralaryngeal ] ] \\draw[dashed] (a1) to[bend right=80] (a2); # add the equal symbol \\node[below= 0.012cm of l2] {=}; \\end{tikzpicture} Preparing exam papers Finally, I write pure LaTeX when preparing exam papers, to get more control over the layout. In addition to the packages mentioned above, I use the package exam to format T/F questions, multiple choices, and fill-in the blanks, etc.\n","permalink":"https://ge-chunyu.github.io/posts/2023-05-handout/","series":[],"tags":["Latex","Linguistics"],"title":"How I make a linguistic handout"},{"authors":[],"categories":[],"content":"It is sometimes useful to export and import the bookmarks of an existing pdf file to a new pdf file with smaller size. This can be easily done using pdftk. pdftk is available as GUI and commandline tools. In MacOS, it is better to use it in the terminal. After installation of pdftk, the bookmarks of one pdf file can be extracted from an existing pdf file and imported to a new pdf file using the following lines.\n# export dump_data from the original file pdftk originalFile.pdf dump_data output bookmark.txt # import dump_data to the new file pdftk newFile.pdf update_info bookmark.txt output newFileWithBookmark.pdf Of course, it is also possible to export the bookmark information as a text file:\npdftk originalFile.pdf dump_data_utf8 | grep '^Bookmark' \u0026gt; bookmark.txt After that, the bookmark can be added to the new file alternatively by the LaTeX package bookmark. The following shows a minimal example (see more explanations in Michael H. Goerz\u0026rsquo;s post.\n\\documentclass{article} \\usepackage[utf8]{inputenc} \\usepackage{pdfpages} \\usepackage[ pdfpagelabels=true, pdftitle={A test pdf file}, pdfauthor={Chunyu Ge}, ]{hyperref} \\usepackage{bookmark} \\begin{document} \\pagenumbering{arabic} \\setcounter{page}{1} \\includepdf[pages=1-2]{originalFile.pdf} \\pagenumbering{roman} \\setcounter{page}{1} \\includepdf[pages=3-8]{originalFile.pdf} \\pagenumbering{arabic} \\setcounter{page}{1} \\includepdf[pages=9-]{originalFile.pdf} \\bookmark[page=1,level=0]{Title Page} \\bookmark[page=17,level=1]{Contents} \\bookmark[page=31,level=1]{Chapter 1} \\bookmark[page=31,level=2]{Section 1} \\end{document} ","permalink":"https://ge-chunyu.github.io/posts/2023-04-pdf-bookmark/","series":[],"tags":["Latex"],"title":"Export and import pdf bookmarks"},{"authors":[],"categories":[],"content":"Use RIME RIME is an input method engine. It can run different input method schemas, and of course, IPA. There are two schemas which are available in RIME, yunlong and xsampa. To use these schemas, you need to install RIME. It can be installed on Windows, MacOS and Linux. After installation, there are two files you need to modify to complete the configuration. The first is default.custom.yaml. My configurations of this file are as below.\n# default.custom.yaml patch: menu/page_size: 8 schema_list: - schema: luna_pinyin # 朙月拼音 - schema: luna_pinyin_simp # 朙月拼音 简化字模式 - schema: zyenpheng # 中古漢語全拼 - schema: ipa_yunlong # 云龙国际音标输入法 - schema: ipa_xsampa # 云龙国际音标输入法 - schema: japanese # 日语输入法 - schema: terra_pinyin # 地球输入法 switcher/hotkeys: - \u0026quot;F4\u0026quot; \u0026quot;ascii_composer/switch_key/Shift_L\u0026quot;: commit_code key_binder: bindings: # commonly used paging keys - { when: paging, accept: Shift+Tab, send: Page_Up } - { when: has_menu, accept: Tab, send: Page_Down } - { when: paging, accept: period, send: Page_Up } - { when: has_menu, accept: comma, send: Page_Down } - { when: has_menu, accept: comma, send: Page_Down } To install the IPA schemas, type the following code in terminal of MacOS, or use the GUI provided by RIME in Windows. A more detailed tutorial of installing Yunlong on Windows can be found here\n# install the package manager of RIME curl -fsSL https://git.io/rime-install | bash # change directory to plum and install ipa schemas cd plum bash rime-install ipa # add Yunlong and xsampa to the default configurations. bash rime-install custom:add:schema=ipa_xsampa bash rime-install custom:add:schema=ipa_yunlong After that, deploy RIME, and when it says Squirrel/Weasel is ready. You can use F4 (or other hotkey you defined, e.g., `Ctrl+``) to change the input method.\nTo input IPA using Xsampa, you can have a look at a guide to Xsampa: https://chromium.googlesource.com/chromiumos/third_party/espeak-ng/+/HEAD/docs/phonemes/xsampa.md\nAnother file you may want to modify is squirrel.custom.yaml or (weasel.custom.yaml on Windows). Basically, this file can configrue how Squirrel or Weasel look like. My configurations are as below.\n#squirrel.custom.yaml patch: style/color_scheme: \u0026quot;simplest\u0026quot; # Use the scheme defined below preset_color_schemes/simplest: name: \u0026quot;simplest\u0026quot; author: \u0026quot;Chunyu Ge \u0026lt;gechunyu92@hotmail.com\u0026gt;\u0026quot; horizontal: false inline_preedit: true alpha: 0.9 back_color: 0x000000 # background text_color: 0xffffff candidate_text_color: 0xffffff # non-first candidate hilited_candidate_back_color: 0xffffff # background of the first candidate hilited_candidate_text_color: 0x000000 # first candidate comment_text_color: 0xffffff label_format: '%s' hanb_font: \u0026quot;HanaMinB\u0026quot; # font of uncommon words Use Yunlong Alternatively, you can simply use Yunlong, which can be installed separately in Windows. Yunlong can be accessed here\nYunlong is quite straightforward. For example, schwa ə is ed, which means e dao (e 倒). Diacritics can be input with the key f. For example, the nasalized vowel ã is af~.\nA main advantage of Yunlong over Xsampa is that it can input apical vowels (ɿ ʅ ʮ ʯ) and other symbols which are used specifically in Chinese.\nType IPA in LaTeX To input IPA in LaTeX, you can use the tipa package, which can input IPA symbols with ASCII code only. A cheatsheet of the symbols can be found in https://ptmartins.info/tex/tipacheatsheet.pdf\nIf you have installed Yunlong or Xsampa, you can also simply type IPA in a LaTeX document, but tipa is also very useful. Some conference or journal templates can only be generated with pdflatex, rather than xelatex, and only the latter can handle non-standard symbols, such as IPA. Therefore, if you want to type IPA in your LaTeX document and run it with the pdflatex engine, you can only use tipa.\nOnline IPA keyboard Yet another alternative is to use online IPA keyboard, if you do not want all that tinkering. The following are some online IPA keyboards. But if you need to input a lot of IPA, better install one of the input schemas.\nhttps://keyman.com/keyboards/sil_ipa (SIL keyboard) https://ipa.typeit.org/full/ http://westonruter.github.io/ipa-chart/keyboard/ ","permalink":"https://ge-chunyu.github.io/posts/2022-12-ipa/","series":[],"tags":["Latex"],"title":"How to setup an IPA input method"},{"authors":[],"categories":[],"content":"在 LaTeX 里显示生僻字是一个棘手的问题。用xeCJK包可以解决这个问题，而且不用在文件中遇见生僻字就改字体。\nxeCJK包的使用手册中有FallBack的选项（8 页），可以用以下两种办法指定生僻字的字体\n\\setCJKmainfont[FallBack=SimSun-ExtB]{SimSun} \\setCJKmainfont{SimSun} \\setCJKfallbackfamilyfont{\\CJKrmdefault}{SimSun-ExtB} 第一种办法是在指定字体时用FallBack参数指定备用字体，第二种办法是在指定字体之后再用\\setCJKfallbackfamilyfont指定备用字体。二者是等价的。但是要注意的是，在用FallBack时，必须在导入xeCJK宏包时设置AutoFallBack=true。\n\\usepackage[AutoFallBack=true]{xeCJK} ","permalink":"https://ge-chunyu.github.io/posts/2022-11-01-shengpizi/","series":[],"tags":["Linguistics","Latex"],"title":"在 LaTeX 中显示生僻字"},{"authors":[],"categories":[],"content":" 已刊于《语言文字周报》。\n酿菜是很多人都很爱吃的菜，比如酿豆腐、酿苦瓜、煎酿三宝等等。所谓酿菜，根据《现代汉语词典》：“烹调方法，将肉、鱼、虾等剁碎做成的馅儿填或塞入掏空的柿子椒、冬瓜等里面，然后蒸或用油煎。”(第六版，949 页)酿菜在各地都广受喜爱，那么“酿”这个词到底是怎么来的呢？\n客家酿豆腐是很有名的菜，酿豆腐的“酿”在客家话里念成 /ŋioŋ52 梅县 ioŋ31 长汀 ȵiɔŋ35 连城/（梅县据谢永昌《梅县客家方言志》，长汀和连城据罗美珍、邓晓华《客家方言》）。 根据客家话，“酿”既可能是娘母字，也可能是日母字。在客家话里，“酿”跟“娘”除了声调不同之外，声母、韵母都一样；但是，“酿”又跟日母的“让”同音。在北京话里，酿菜的“酿”一般读成“让”。这么看来，“酿”应该是一个日母字，写作“酿”只是日母和娘母同音造成的混淆。另外，从调值来看，不论是客家话还是北京话，“酿”都是一个去声字。\n中国人做酿菜由来已久，《易牙遗意》《调鼎集》等烹饪古籍中都有酿菜的记录。这些记录里酿菜有的写成“酿”，有的写成“瓤”。最早用“酿”字的似乎是北魏贾思勰的《齐民要术·炙法第八十》的“酿炙白鱼法”：“白鱼长二尺，净治，勿破腹。洗之竟，破背，以盐之。取肥子鸭一头，洗治，去骨，细剉；酢一升，瓜菹五合，鱼酱汁三合，姜、橘各一合，葱二合，豉汁一合，和，炙之令熟。合取，從背入著腹中，丳之如常炙鱼法，微火炙半熟，复以少苦酒、杂鱼酱、豉汁，更刷鱼上，便成。”说的是把白鱼从背部破开，腌制之后，将肥子鸭肉与酢（即醋）、瓜菹（腌过的瓜）、鱼酱汁、姜、橘等和成馅，从背部填入白鱼中，再把鱼用签子串起来，用小火炙烤，最后刷上苦酒、杂鱼酱、豉汁即可。其他烹饪古籍中也不乏写成酿的，比如宋浦江吴氏的《吴氏中馈录》，有酿瓜（15 页），就是将青瓜去瓤，而将生姜、陈皮、薄荷、紫苏、茴香、砂仁、砂糖等酿入青瓜中。元代的《居家必用事类全集》中有酿烧鱼、酿烧兔等；元代大画家倪瓒的《云林堂饮食制度集》中也有酿黄雀；明代韩奕的《易牙遗意》里也有酿肚子等。而这种做法在清人的《调鼎集》里则一般写作“瓤”，例如夹瓤肚（187 页）、瓤鸡（274 页）、瓤野鸡（305 页）、瓤野鸭（335 页）、瓤虾圆（443 页）、烧瓤虾绒（444 页）、瓤毛笋、瓤羊尾笋、瓤天目笋（519 页）、瓤芽笋（520 页）、瓤萝卜（532 页）、瓤板桥萝卜（543 页）、瓤芋子、瓤芋头（607 页）等等。举凡蔬菜（萝卜、笋等）、鸡鸭，乃至虾圆、肚子，几乎无物不可以瓤。\n在汉语里，从襄声的字往往有里面、内部的意思。大家最熟悉的例子就是瓜瓤的瓤。其他的比如穰，《说文解字·禾部》：“穰，黍𥟜已治者，从禾襄声”。段玉裁的注说：“已治、谓已治去其𥬡皮也。謂之穰者、莖在皮中如瓜瓤在瓜皮中也。”穰就是指谷物除去外壳的部分，跟瓜瓤指去除瓜的外皮的部分一样。又比如欀，也有里的意思。《洛阳伽蓝记·城南》菩提寺条下记载了一个故事。说的是北魏明帝的时候，有人挖开古冢发现了一个活人。似乎因为这个人死过一回，所以对阴间的事情颇有了解。他告诉当时的人说：“作柏木棺，勿以桑木为欀。”周祖谟注说：“欀，里也。”这也就是说让人用柏木作棺材，而不要用桑木作里子的意思。\n明白了从襄声的字有里面、内部的意思，再来考虑“酿”字的来源就豁然开朗了。“酿”同样有里面、内部的意思，只不过是指将馅料填入内部。很明显，“酿”是从襄声的名词派生出来的动词，而相应地，从襄声的穰、瓤等都是平声，而“酿”则是去声。这是汉语中常见的四声别义的现象。在汉语里，有些词读平声是名词，而读作去声则是动词。例如衣读平声指衣服，是名词，而读去声则是穿衣服，是动词；王读平声是君王的意思，是名词，读成去声则是作君王，是动词（所举的例子见周祖谟《四声别义释例》，《问学集》81-119页）。按照平声为名词、去声为动词的字一般都用平声的字来记录的习惯，“酿”字似乎写成“瓤”更合适，只不过读的时候还是应当读成去声。当然，“酿”字行用已久，也没有必要大费周章，换用另一个字。而且，按照“酿”字的本音来读似乎也没有什么问题。只不过读成“瓤”去声是北京话的本音，而读成“酿”就是源于其他方言的旁读音了。\n汉语由于用汉字来记录，大家在说一个字的本义的时候往往根据字形，这样对很多字的理解就会与最开始的造字本义发生偏离。“肏”就是一个典型的例子。“肏”本来读成“入”（或者日），是一个从肉入声的形声字；现在大家则把它当成了一个会意字，读音也变成了操去声（见李荣《论“入”字的音》，《方言》1982年第4期241-244页）。这些例子都启示我们，考察汉语词义，不能为汉字字形所惑，还要从语音上着手。这也就是清儒“因声求义”的办法。只不过，我们现在不仅要着眼于语音，还要发现语音中反映出的形态手段等其他语言规则，而不能倒退到“一声之转”的老路上去。\n","permalink":"https://ge-chunyu.github.io/posts/2022-08-niangcai/","series":[],"tags":["Linguistics"],"title":"说“酿菜”的“酿”"},{"authors":[],"categories":[],"content":"天空中除了位置比较稳定的恒星之外，还有位置时常发生变动的行星。与恒星不同，行星自身并不发光，而是和月亮一样，靠反射太阳光来发光。因此，行星与太阳、地球之间的相对位置不同会导致地球上所能看到行星反射太阳光面积大小不同的情况。同样的原因造成了月圆月缺，行星也有类似的现象，比如金星就有相位变化。但是由于金星离地球较远，又有致密的大气层，所以直到伽利略才通过望远镜发现金星也有相位变化。\n太阳系有九颗行星，离太阳由近到远分别是水星、金星、地球、火星、木星、土星、天王星、海王星。天王星和海王星直到十九世纪才被发现，天王星是 William Herschel 通过望远镜发现的，而海王星最早则是英法两国的学者通过计算发现的（这还引起了英法两国争夺海王星命名的争论）。除了我们赖以生存的地球之外，不借助望远镜，人类只能看到水星、金星、火星、木星、土星五颗行星。古人认为这五颗行星代表了五行。襄公二十八年《正义》：“五星者，五行之精也。历书称木精曰岁星，火精曰荧惑，土精曰镇星，金精曰太白，水精曰辰星。此五者皆右行于天。”木星最初叫岁星、火星叫荧惑、土星叫镇星、金星叫太白、水星叫辰星。火星之所以叫荧惑，是因为火星的轨道运动导致它在地球上的视运动极其复杂，足以令人迷惑。土星叫镇星，镇和填是一样的，即指土星为土精。金星叫太白是以金星的颜色来命名的。金星又叫启明和长庚。《诗经·谷风之什·大东》：“东有启明，西有长庚。”金星是内行星，与太阳的距离不会太远，因此一般在日出之前或日落之后最便于观测。金星在日出之前出现就叫启明，在日落之后出现就叫长庚，取赓续日光之义。水星叫辰星。《星象》中认为“辰”可以指任何鲜明的天体，因而又可以指水星。问题在于，水星作为离太阳最近的行星，常常为日光所掩，不便观测，实在称不上鲜明。木星叫岁星的原因就是本篇的主题。\n襄公九年晋悼公问季武子鲁襄公的年纪，季武子说：“会于沙随之岁，寡君以生。”晋悼公说：“十二年矣。是谓一终，一星终也。”杜预注：“岁星十二年而一周天。”《正义》：“知是岁星者，以古今历书推步五星，金、水日行一度；土三百七十七日，行星十二度；火七百八十日，行星四百一十五度，四者皆不得十二年而一终。唯木三百九十八日，行星三十三度，十二年而强一周。”木星的公转周期是 11.86 年，因此说十二年而走一周多。因为知道木星的周期大约为十二年，古人将黄道分为十二部分。这样就可以根据木星的位置来纪年。在春秋时期，各国都以国君来纪年，这对于国际交流极其不便。以木星的位置来纪年就迎合了这种需求。这就是木星被称作岁星的原因。\n黄道是太阳与行星视运动轨迹扫过的一片天区。黄道分为的十二个部分就称之为十二次。古人不仅将黄道划分为十二次，还把地理区域与十二次对应起来。地理区域与黄道天区的对应就称之为分野。十二次主要记载在《周礼·春官·保章氏》郑玄注中；《尔雅·释天》中也记载了其中几个星次；《汉书·律历志》也记载了十二次，并把十二次与二十八宿对应起来。二十八宿与十二次一样，都是黄道天区，二十八宿各有距星，古人以天体离距星的距离和离北天极的距离来作为天体的坐标。天体离北天极的距离称为去极度，为赤纬的余角；而天体的赤经与现代通用的以春分点来作为标准不同，是以二十八宿的距星为标准的，这称之为入宿度。二十八宿并不是等分的，而为了配合岁星大约十二年一周的运行周期，古人将黄道大致平均分为十二次。因此，十二次可以与二十八宿对应，又可以与地理区域对应；另外，由于岁星可以用来纪年，岁星还可以与十二地支对应；古人又假想了与岁星对应的在地上运行的太岁，它与岁星对应，经过的十二个区域称为岁阴。下面这张表就说明了十二次与二十八宿、十二地支、列国分野、岁阴的对应关系。\n十二次 析木 大火 寿星 鹑尾 鹑火 鹑首 实沈 大梁 降娄 娵訾 玄枵 星纪 二十八宿 尾箕斗 氐房心尾 轸角亢氐 张翼轸 柳星张 井龟柳 毕觜参井 胃昴毕 奎娄胃 危室壁奎 女虚危 斗牛女 分野 燕 宋 郑 楚 周 秦 晋 赵 鲁 卫 齐 吴越 十二地支 寅 卯 辰 巳 午 未 申 酉 戌 亥 子 丑 岁阴 赤奮若 困敦 大渊献 阉茂 作鄂 涒滩 协洽 敦牂 大荒骆 执徐 单阏 摄提格 但事实上木星的周期为 11.86 年，并不是准确的十二年。《史记·天官书》：“岁行三十度十六分度之七，率日行十二分度之一，十二岁而周天。”《淮南子·天文训》中的说法一模一样。与西方人将一周划分为 360 度不同，中国古人将一周分为 365.25 度。古人已经发现一个回归年的长度大约为 365.25 天1，将一周分为 365.25 度，则太阳一天走一度，一年之后重新回到原处。根据《天官书》和《天文训》的说法，木星十二年正好走一周，也就是 365.25 度。\n$$12 \\times 30 \\frac{7}{16} = 12 \\times 365.25 \\times \\frac{1}{12} = 365.25$$\n这说明《天官书》和《天文训》是以十二年的周期算出木星的平均运行速度，并不是实测。由于木星的周期比十二年略差一点，所以每隔大约七个周期，木星就要比预计的多走一次。也就是 $1 / (12 - 11.86) = 7.14$。春秋时候的人把这种现象叫做“淫行失次”，就是木星走快了，多走了一次。为了解决这种矛盾，刘歆提出了“超辰法”，也就是每过七个周期，把十二次往后挪一个，这就跟木星实际的位置一致了。\n十二次与分野的起源应该相当早。在十二次和分野的对应关系中，可以发现晋国对应实沈，这是上一篇《星象》中讨论过的，实沈是很早的传说，到晋悼公的时候连晋国都没人知道了。另外，大火对应宋，宋是商人的后裔，商人主火也是上一篇就提到了的。襄公九年《左传》也说：“心为大火，陶唐氏之火正阏伯，居商丘，祀大火，而火纪时焉，相土因之，故商主大火，商人阅其祸败之衅，必始于火。”商人是用大火星来纪时的，所以将大火与商人的后裔宋人对应。在上古时期，不同地区的人往往通过观测不同的天体来确定时间，预测气候。古埃及人就用天狼星（Sirius）来预测尼罗河的泛滥。十二次可能就是在此基础上发展而来的2。\n《保章氏》说：“以星土辨九州之地，所封封域，皆有分星，以观妖祥。”可见岁星所在与对应地区的吉凶有关。《日食》篇中已经提到日食所在十二次的位置会引起相应地区的灾异。《天官书》：“（岁星）所在国不可伐，可以罚人。”与岁星所在对应的地区有福。昭公三十二年《左传》：“夏，吴伐越，始用师于越也。史墨曰：‘不及四十年，越其有吴乎？越得岁，而吴伐之，必受其凶。’”杜预注：“存亡之数，不过三纪。岁星三周三十六岁……此年岁在星纪，星纪，吴越之分也。岁星所在，其国有福。吴先用兵，故反受其殃。”昭公三十二年吴国侵略越国，这一年岁星在星纪。星纪是吴越的分野。那为什么同为岁星所在之国，吴国用兵就凶呢？因为尽管岁星所在之国，可以罚人；但是吴国所伐的是同在星纪的越国，所以吴国反而会倒霉。\n岁星所在的吉凶又与岁星的运行有关。襄公二十八年，根据十二年一周的周期，岁星应当在星纪，但实际却在玄枵，多预计的多走了一次。这当然是由于木星周期短于十二年所致。但是当时的人认为这是灾异的征兆。鲁国大夫梓慎说：“今兹，宋、郑其饥乎？岁在星纪，而淫于玄枵，以有时菑。阴不堪阳，蛇乘龙。龙，宋、郑之星也。宋、郑必饥。玄枵，虚中也；枵，秏名也。土虚而民秏，不饥何为？”蛇是虚危之星，玄枵正好对应着虚危，龙对应东方七宿，东方七宿对应的十二次是大火和寿星，分野为宋、郑。因而宋、郑会出现灾异。玄枵是虚中、消耗的意思，所以宋、郑会出现饥荒。但是郑国大夫裨灶说：“今兹周王及楚子皆将死，岁弃其次，而旅于明年之次，以害鸟帑，周楚恶之。”裨灶认为岁星失次，是鹑火、鹑尾受灾，与之对应周和楚要倒霉。杜预注说：“俱论岁星失次，梓慎则曰宋郑饥，裨灶则曰周楚王死。传故备举，以示卜占惟人所在。”这就是说面对同样的天文现象，梓慎和裨灶两个人说法不一，占卜是因人而异的。由此也就可见用十二次与分野来占卜吉凶是多么荒谬了。\n古人计算时多用分数，365.25 的分数部分就是四分之一，所以以 365.25 天为一年长度的历法就称之为“四分历”。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n三代以上，不同部落的习俗制度可能相差很大。例如昭公十七年：“昔者黄帝氏以云纪，故为云师而云名；炎帝氏以火纪，故为火师而火名；共工氏以水纪，故为水师而水名；大皞氏以龙纪，故为龙师而龙名。我高祖少皞挚之立也，凤鸟适至，故纪于鸟，为鸟师而鸟名。”\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","permalink":"https://ge-chunyu.github.io/posts/2020-08-cq-fenye/","series":[],"tags":["Astronomy"],"title":"春秋时期的天文：十二次与分野"},{"authors":[],"categories":[],"content":"太阳下山，夜空中就会布满繁星。在浩瀚宇宙中传递了亿万年的星光，由于位置相近或偶然的投影，在夜空中形成了各种形状。人类看到这些形状就会联想到生活中的事物，或是想出新奇的故事。现代 88 个星座的命名有的历史悠久，有的则比较年轻。南天星座大多是大航海时代命名的，因此大多取象于航海仪器，比如六分仪座（Sextans）、望远镜座（Telescopim）。北半球的星座的命名则由来已久，往往是以神话命名的，比如武仙座（Hercules，宙斯的儿子大力士海格立斯）、仙后座（Cassiopeia，古代埃塞俄比亚的王后）。在中国，也有星座是用神话来命名的。《左传·昭公元年》子产给叔向讲了这么一个故事：\n昔高辛氏有二子，伯曰阏伯，季曰实沈，居于旷林，不相能也。日寻干戈，以相征讨。后帝不臧，迁阏伯于商丘，主辰，商人是因，故辰为商星；迁实沈于大夏，主参，唐人是因，以服事夏商，其季世曰唐叔虞。当武王邑姜，方震大叔，梦帝谓己：“余命而子为虞，将与之唐，属诸参，而蕃育其子孙。”及生，有文在其手，曰虞，遂以命之。及成王灭唐，而封大叔焉。故参为晋星，由是观之，则实沈，参神也……\n这一年，晋平公得了病，郑伯派公孙侨，也就是子产去晋国看望晋平公。晋国的卜人说晋平公的疾病是“实沈、台骀为祟”，但是晋国的太史都不知道“实沈”、“台骀”是什么神。叔向就向子产请教。子产是“博物君子”，就给叔向讲了这么一段故事。高辛氏生了两个二子，大儿子叫阏伯，小儿子叫实沈，两个人住在大森林里，但是关系不好，天天打仗。高辛氏看不下去了，就把大儿子阏伯迁到商丘，主辰；又把小儿子实沈迁到大夏，主参星。商人居于阏伯故地，所以商人祀辰星，而唐人住在实沈故地，祀参。周武王的王后邑姜（齐大公姜子牙的女儿）怀孕的时候梦到上帝对她说：“你怀的这个孩子，我给他起名叫虞，要把唐地给他，把参给他掌管。”大叔生下来之后，手上的掌纹像虞字，于是就叫他虞。等到周成王灭了唐，就把唐作为大叔虞的封邑。大叔分封在唐，就是晋侯。因此，晋国祀参星，实沈就是参神。辰就是天蝎座（Scorpius）；参星又叫伐，是猎户座（Orion）。天蝎座在夏季出现在北半球南部的天空，猎户座则是冬季出现。这两个星座从来不同时出现在夜空中，所以古人认为这两个星座是关系不好的两兄弟。在希腊神话中，天蝎座是毒死猎户座的蝎子，所以它们也互不相见。春秋时候，一般都知道参是晋星。昭公十五年周景王说：“唐叔受之，以处参虚。”但是为什么参是晋星就很少有人知道了，就是世处参虚的晋国人也都不知道。可见星座的命名来源在春秋时期就已经鲜为人知，流传到今天的就更少了。\n辰是天蝎座，一般指大火，就是心宿二（Antares，$\\alpha$ Scorpii，天蝎座的最亮星）。但是辰并不仅仅指大火。晋侯就觉得很迷惑，昭公六年晋侯问伯瑕：“多语寡人辰，而莫同，何谓辰？”伯瑕说：“日月之交是谓辰。”辰是指日月的交汇。事实上，辰的含义远不止这么几种。辰大概有这么几种含义：\n大火。昭公元年杜预注：“辰，大火也”；昭公十七年《公羊传》：“辰，大火也”； 日月之交。昭公六年：“日月之交是谓辰”； 房心尾。昭公十七年杜预注：“大辰，房心尾也”； 日月星。昭公十七年：“三辰有灾”，杜预注：“三辰，日月星也”；又“辰不集于房”； 伐。昭公十七年《公羊传》：“伐为大辰”； 北辰。昭公十七年《公羊传》：“北辰亦为大辰”。 辰除了日月星之外，还可以指北斗七星（北辰）、猎户座（伐）、天蝎座（房心尾），甚至日月的交会。北斗七星、天蝎座、猎户座都是天空中最明亮、最引人注目的天体，可见辰可以指天空中任何显著的天体。推而广之，则可以笼统地指日月星；引而申之，又可以指日月交会。《说文》：“辰，震也。”是声训的例子。汉人训诂，多用声训。《淮南子·天文训》解释十二干完全用声训的办法1。这种解释明显是后起的。\n这些引人注目的天体随着地球的公转不断变换位置，但是又年复一年地回到原先的位置。这些天体的位置事实上标志了地球在绕太阳公转轨道上的位置。地球上的一年四季是由于地轴与黄道面并非垂直，而存在一定的倾角（23.44度）引起的。地球运行到太阳公转轨道的不同位置与地球上不同的季节相对应。因此，季节又与天体的位置相对应。古代的历法不够发达，要知道季节变换就靠观察天体的位置。《尚书·尧典》：“日中星鸟，以殷仲春；日短星火，以正仲夏；宵中星虚，以殷仲秋；日永星火，以正仲冬。”春夏秋冬四个季节，各有运行到天空正中的星2。在这些星中，古人尤其注意大火的位置。\n大火星就是心宿二（Antares），是天蝎座的最亮星（$\\alpha$ Scorpii）。心宿二的光谱类型 M1，是一颗表面温度较低的超巨星，呈红色。正是由于心宿二为红色，所以古人称之为大火。《诗经·豳风·七月》：“七月流火”，就是说七月的时候大火往西行，即将隐入地平线以下了。昭公三年《左传》：“火中，寒暑乃退。”杜预注：“火，心星也。心以季夏昏中而暑退，季冬旦中而寒退。”大火的位置标志了一年中气候的寒暑。当大火在太阳落山后出现在南方天空的中部时，暑气就会消退，秋天就快到了；当大火在太阳升起之前出现在南方天空的中部时，寒气就会消退，春天就快到了。\n天体在天空中出现的时间和位置也为人们进行生产、社会活动提供了重要的参考。桓公五年《左传》：“凡祀，启蛰而郊，龙见而雩，始杀而尝，闭蛰而烝。”早春，东方苍龙七宿在黄昏时候出现在东方天空时，就要举行雩，也就是祭天的典礼。东方苍龙七宿包括角、亢、氐、房、心、尾、箕。角大概相当于牧夫座（Bootes）、亢则相当于室女座（Virgo）、氐相当于天秤座（Libra）、房心尾相当于天蝎座、箕大概相当于人马座（Sagittarius）。在东方七宿中，最明亮的是大角星（Arcturus），是天空中第四亮星（仅次于天狼星、老人星、南门二）。大角星相当于苍龙七宿的龙角，昏见东方大概是农历二月初的时候，所以民间把这个时候称作“龙抬头”。当大角星在日出之前出现在东方的时候，则是夏历九月，农活基本都结束了，就可以开始准备修备守御了。所以庄公二十九年《左传》说：“凡土功，龙见而毕务，戒事也；火见而致用，水昏正而栽，日至而毕。”等到大火晨见东方，就要准备修筑城墙的木材板干了。到水星昏正的时候，就开始修筑城墙了。这里的水星并不是行星水星，而是指北方七宿，因为北方七宿属水，所以称为水星，其中又特指定星。《诗经·卫风·定之方中》：“定之方中，作于楚宫。揆之以日，作于楚室。”这是说定星昏正的时候，开始营建宗庙（楚室），通过测定日影，来考知东西南北，以定宫室的朝向。定星又叫营室，由定星昏中开始营建宫室而得名。营室二星与东壁二星合起来近似一个正方形，也就是现代所说的飞马座大正方形（The Great Square of Pegasus）。《小序》中说：“定之方中，美卫文公也。卫为狄所灭，东徙渡河，野处漕邑，齐桓公攘夷狄而封之，文公徙居楚丘，始建城市而营宫室，得其时制，百姓说之，国家殷富焉。”卫懿公好鹤，卫国人对卫懿公非常不满，所以狄人趁虚而入，攻打卫国。卫国公主许穆夫人对父母之邦感情深厚，对只会空谈的公卿大夫深为痛切，作了《载驰》这首诗。齐桓公作为霸主，将卫国遗民迁徙到楚丘。卫文公根据星象及时兴作，锐意进取，所以卫国国势重振（闵公二年）。\n《淮南子·天文训》： ……（斗）指寅，則萬物螾螾也……指卯，卯則茂茂然……指辰，辰則振之也……指巳，巳則生已定也……指午，午者，忤也……指未，未，昧也……指申，申者，呻之也……指酉，酉者……指戌，戌者，滅也……指亥，亥者，閡也……指子，子者，茲也……指丑，丑者，紐也……\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n由于地球的地轴并不是固定的，而是不断运动的，这就造成了岁差（precession）。岁差的结果就是北极星不是终古不变的，而星星的位置也不断发生着细微的改变。竺可桢运用这种原理来考证《尧典》“四仲中星”的年代（《论以岁差定尚书尧典四仲中星之年代》）。但是《尧典》中并没有说具体是在一年中的哪天观测到中星的现象，也没有说这些中星是昏中（太阳落山时中天）还是旦中（太阳升起之前中天），所以对四仲中星的年代仍有争议。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","permalink":"https://ge-chunyu.github.io/posts/2020-08-cq-astrology/","series":[],"tags":["Astronomy"],"title":"春秋时期的天文：星象"},{"authors":[],"categories":[],"content":"日升月落，星移斗转，是最鲜明的天体运动。先民在长期观察中，发现气候寒温、草木荣枯与天象之间存在紧密的关系。上古时期，历法还不够成熟，而且也不够普及；又没有准确的计时系统。天象在先民的日常生活中起着极其重要的作用。这就是为什么“三代以上，人人皆知天文”的缘故。到了后世，历法发达，计时系统逐渐准确，而大部分人又不必从事与气候紧密相关的农业劳动，因此，“有问之文人学士而懵然不知者”。\n春秋时期对天象的观察和记录已经相当准确而频繁。太阳是天空中最明亮的天体，它为地上的一切提供光和热。当日食发生时，人民难免会感到恐惧，认为这是上天给人类的警告，并且将要降下责罚。在春秋之前不久，周王朝尚未东迁的时候，周人就见到了一场日食。在这场日食之前一个月不到，还发生了月食。不仅如此，在国都附近还发生了地震，连高山都崩塌了。日升月恒、南山的稳固、松柏的长茂，在古人心中都是最理所当然的自然现象。一时之间，月食、日食、地震。这么多灾异接连而至，不能不令周人感到恐惧。这场日食记录在《诗经·小雅·十月之交》中，《诗序》说是“刺幽王”。到了春秋时期，古人非常重视观察记录日食。在 242 年间，《春秋》总共记录了 37 次日食。\n日食是由于太阳、地球、月亮三者处在特定位置造成的。当月亮出现在太阳和地球之间时，太阳光被月球挡住，于是就发生了日食。但是，月亮比太阳小，即便发生日食，太阳往往也不能完全被月亮遮住。当太阳完全被月亮遮住时，就会发生日全食；而当太阳的一部分被月亮遮住时，就会发生日环食或是日偏食。春秋时候将日全食叫做“既”。鲁隐公三年就发生了一场日全食。《春秋》中记载：“秋七月壬辰朔，日有食之，既”。《正义》中说：“食既者，谓日光尽也”。古人早就知道日食是由于太阳被月亮挡住造成的。这对于春秋时代的人来说不可谓不是一个大发现。知道了日食发生的原因，就可以知道日食必定发生在朔日，也就是每个月（朔望月）的初一。同样地，月食也必定发生在每个月的十五，即望日。\n《春秋》中记载日食，一般会记载日食发生的日期，并标上“朔”，即当月初一。有时不书日期或朔日，是日官记载失误。例如桓公十七年：“冬十月朔，日有食之。”《左传》说：“不书日，官失之也。”但是春秋时期历法尚不成熟，对于朔望月的推算偶尔会出现差错，因此有日食而发生在朔前一日的情况。文公八年：“秋七月甲子，日有食之，既。”在文公八年七月甲子这一天发生了日全食，杜预注说：“月三十日而食。”七月甲子是七月三十日，不是朔日（初一），因此不书朔。另外一方面，我国历法以朔望月（阴历）与回归年（公历）相配，而一个朔望月的长度过短（29.530588），一年十二月与回归年的长度（365.25）相比还差好几天（365.25 - (29.530588 × 12) = 10.882944）。因此，每隔几年就要将多出来的日子作为闰月。春秋时期，置闰还不是很准确，常常会有失闰的情况出现，也就是本应置闰而没有置。这样，月份就会出现误差。襄公二十三年：“冬十有二月，乙亥，朔，日有食之。”《左传》说：“十一月乙亥，朔，日有食之，辰在申，司历过也。再失闰矣。”\n日食是有一定周期的。巴比伦天文学家发现了沙罗周期（Saros），认为只要知道发生了一次日食，则经过 223 个朔望月（或 18 年 11 天 8 小时）就会发生一次同样的日食。但是，《春秋》中记载了好几次频年日食、甚至频月日食的现象，也就是连续两年或连续两个月都发生日食。例如，襄公十四年二月日食，而十五年八月又日食；襄公二十四年七月日食，八月又日食。《正义》说：“今七月日食既，而八月又食，于推步之术，必无此理。盖古书磨灭，置有错误。”古人将天体的运行比作行走，日月运行就称作“日躔月离”。《说文》：“躔，践也。”而“践，履也。”躔、践、履都有行走的意思。所以就把推算天体运行的学说称作“推步之学”。\n日食在古人看来是一件大事。日食发生时要举行特别的仪式。在传说中的夏朝就有日食时举行的特殊仪式。昭公十七年鲁国太史引用《夏书》说：“辰不集于房，瞽奏鼓，啬夫驰，庶人走。”所谓“辰不集于房”就是天体不在它应该在的位置。辰在早期可以用来指任何重要的天体，在这里就是指太阳。到了周朝，“封建亲戚，以藩屏周”，天子、诸侯各有不同的仪式。同样是昭公十七年日食，叔孙昭子说：“日有食之，天子不举，伐鼓于社，诸侯用币于社，伐鼓于朝。”天子不举乐，在社击鼓，而诸侯则是在社献上牺牲，在朝击鼓。所以，庄公二十五年：“六月，辛未，朔，日有食之，鼓，用牲于社。”但是并不是每次日食发生都会举行这样的仪式，只有在特定的月份发生日食才会举行。《左传》说：“唯正月之朔，慝未作，日有食之，于是乎用币于社，伐鼓于朝。”只有当正月发生日食，才会举行这一套仪式；但是这里的正月并不是现在的农历正月。杜预注说：“正月，夏之四月，周之六月，谓正阳之月。”指的是周朝的六月。因此，昭公十七年六月初一日食，理应用牲于社，伐鼓于朝，但是季平子却百般阻挠，所以叔孙昭子说：“夫子将有异志，不君君矣。”季平子对昭公不满，所以到了昭公二十五年，昭公就被季氏赶出了鲁国，“孙于齐”了。\n日食是非常罕见的天文现象，古人将天文现象与人事吉凶相互联系起来。但是何者为吉，何者为凶往往各执一词。昭公二十一年七月初一（壬午）日食，鲁昭公问梓慎这场日食到底是吉是凶。梓慎说，：“二至二分，日有食之，不为灾。日月之行也，分，同道也；至，相过也。其他月则为灾。阳不克也，故常为水。”梓慎认为日食是阳气不敌阴气，所以日食发生的年份大多发生水灾。二十四年五月又发生了日食，梓慎还是说会有水灾，叔孙昭子不同意，说：“旱也。日过分而阳犹不克，克必甚，能无旱乎？”叔孙昭子认为太阳已经经过了春分点而阳气仍然不敌阴气，因此阳气积聚，将会导致旱灾。然而日食发生，并不是所有地区都会出现同样的灾异；古人认为灾异的发生与太阳所在位置有关。昭公七年四月初一（甲辰）日食，晋昭公问士文伯谁将当日食，士文伯回答说鲁国和魏国将要遭受日食的灾异，原因在于“去卫地，如鲁地”。如何知道这次日食是“去卫如鲁”呢？古人将黄道分为十二个天区，即十二次，并将这十二个天区与十二诸侯相配，说明天空中的区域与地理上的对应关系，这就是分野。鲁国对应于降娄，卫国对应于娵訾，娵訾又名豕韦。日食的时候太阳在豕韦之末，到降娄之始才结束。因此鲁卫会发生灾祸。那么十二次到底是如何来的呢？《十二次与分野》就会讨论这些问题。\n","permalink":"https://ge-chunyu.github.io/posts/2020-08-cq-eclipse/","series":[],"tags":["Astronomy"],"title":"春秋时期的天文：日食"},{"authors":[],"categories":[],"content":"ggplot2 is great for visualization, but sometimes we need to include ggplot2 functions within another function. ggplot() uses aes() to define aesthetic mappings of different variables. The question is: how to define aesthetic mappings when writing functions using ggplot()? In this post I will present several approaches.\nFirst of all, let\u0026rsquo;s load the required packages and some test data.\nlibrary(ggplot2) library(dplyr) data(\u0026quot;mtcars\u0026quot;) Using aes_string() There are two standard ways to define aesthetic mappings in ggplot2, aes_string() and aes_(). Writing a function using aes_string() is the same as using aes(), but calling the function requires passing the variable names as strings to the function.\nplot_point_aes_string \u0026lt;- function(data, x, y, c) { ggplot(data, aes_string(x, y, color = c)) + geom_point() + theme_light() } plot_point_aes_string(mtcars, \u0026quot;mpg\u0026quot;, \u0026quot;wt\u0026quot;, \u0026quot;cyl\u0026quot;) Use aes_() Alternatively, we can use aes_(), which is slightly different from aes_string(). Wrapping aes_() into a function is the same as aes() and aes_string().\nplot_point_aes \u0026lt;- function(data, x, y, c) { ggplot(data, aes_(x, y, color = c)) + geom_point() + theme_light() } The difference is the way to pass variable names. We can either pass the variable names as one-sided equations (~variable names) or as quotes (quote(variable name)).\nplot_point_aes(mtcars, ~mpg, ~wt, ~cyl) plot_point_aes(mtcars, quote(mpg), quote(wt), quote(cyl)) Another alternative I happened to work out another method which circumvent both aes_string() and aes_(). Simply define the aesthetic mappings in the function, and later rename the variable names in the data.\nplot_point \u0026lt;- function(data, x, y, c) { ggplot(data, aes(x, y, color = c)) + geom_point() + theme_light() } Applying the tidy approach and using mutate to rename the variable names, which does not cause any side effect to the original data. But one thing to note is that the labels of the axes are what defined in the function.\nmtcars %\u0026gt;% mutate(x = mpg) %\u0026gt;% mutate(y = wt) %\u0026gt;% mutate(c = cyl) %\u0026gt;% plot_point(mtcars) References Creare ggplot2 function and specify arguments as variables in data as per ggolot Use of ggplot within another function ","permalink":"https://ge-chunyu.github.io/posts/2020-03-ggplot-function/","series":[],"tags":["R","Ggplot2"],"title":"How to define aesthetic mappings of ggplot2 within another function"},{"authors":[],"categories":[],"content":"Praat is widely used in phonetic research. Working with Praat involves inevitably the Praat scripting. There are plenty of resources of Praat scripts as well as great tutorials to Praat scripting (see below). Why bother writing Praat scripts oneself?\nPraat scripts written by others can be helpful, but even an script is available which offer the functionality one needs, it is seldom exactly what one wants. It is normal to do some tailoring to the scripts. Users of Praat may be great phoneticians, but rarely are they professional programmers. When I write my own Praat scripts, I try to explicitly adopt some principles and conventions to facilitate the reusability of code. This post is about these principles and conventions.\nDrawbacks of existing Praat scripts In working with various Praat scripts, I find two drawbacks of some scripts:\nFunctions of some scripts are too specific Some scripts are designed to perform two or more tasks simultaneously These two features have some negative effects. Using scripts with specific functions can lead to tailoring when customizing them to one\u0026rsquo;s own needs. Sometimes, the tinkering even takes more time than if one decides to write his own scripts right away. To perform several tasks at the same time may save some time, but doing research is never an once for all affair. It is usual for one to go back to revise some of the steps he has taken before. Now the scripts with too many functions get on his way. Undesirable functions distract him, and if he wants to get rid of it, once again he falls into the trap of tailoring.\nThe Unix pholosophy and modular programming Professional programmers offer their wisdom. The Unix Philosophy and the modular programming[^1] are priceless in this scenario. The Unix philosophy says that Small is beatiful and requires programs to do one thing well. This inspired me to reflect on the workflow of phonetic research using Praat. Phonetic research starts with annotation and segmentation in Praat, and steps to acoustic analysis. Annotation and segmentation are two separate tasks. It is better to do these tasks using separate scripts.\nAnother useful idea is modular programming. Modular programming is the practice of splitting a large programme into separate modes. It improves the reusability of codes. Modular programming requires you to pay attention to orthogonality. I will illustrate this idea in the next section.\nUse procedure We can abstract common tasks into functions. Praat provide a mechanism called procedure, which can accept parameters and do certain commands. It differs from a function command in other programming languages in that procedure can not return values or objects.\nMaking illustrations with Praat is tedious manually. Using procedure, it is much easier to make illustrations, and minor revisions are needed to customize the pictures. Suppose I want to draw the waveform of a sound file together with the annotation file. It is OK to select both obeject and draw them together, as follows.\nselectObject: \u0026quot;Sound test\u0026quot;\rplusObject: \u0026quot;TextGrid test\u0026quot;\rDraw: 0, 0, \u0026quot;yes\u0026quot;, \u0026quot;yes\u0026quot;, \u0026quot;yes\u0026quot;\rHowever, this approach is not modular. Suppose later I want to draw the spectrogram of the sound file together with its annotation, there is no available function as to \u0026ldquo;draw TextGrid together with a spectrogram\u0026rdquo;. This leads me to abstract the drawing of TextGrid as a procedure, which can be used together with other procedures.\nprocedure draw_TextGrid: .baseName$, .start, .end\rselectObject: \u0026quot;TextGrid \u0026quot; + .baseName$\rSelect inner viewport: 1, 4, 1, 3\rDraw: .start, .end, \u0026quot;yes\u0026quot;, \u0026quot;yes\u0026quot;, \u0026quot;no\u0026quot;\rDraw inner box\rAxes: 0, .end - .start, 0, 5000\rMarks bottom: 5, \u0026quot;yes\u0026quot;, \u0026quot;yes\u0026quot;, \u0026quot;no\u0026quot;\rText bottom: \u0026quot;yes\u0026quot;, \u0026quot;Time (s)\u0026quot;\rendproc\rAt first glance, this procedure contains more lines than the previous block. The advantage of this procedure is that you can use it independently in any occassion you want, together with other procedures you define. To illustrate, I wrote another procedure which draws the waveform of a sound.\nprocedure draw_waveform: .baseName$, .start, .end\rselectObject: \u0026quot;Sound \u0026quot; + baseName$\rSelect inner viewport: 1, 4, 1, 2.15\rDraw: .start, .end, 0, 0, \u0026quot;no\u0026quot;, \u0026quot;Curve\u0026quot;\rendproc\rAnd another procedure which draws the spectrogram:\nprocedure draw_spectrogram: .baseName$, .start, .end\rselectObject: \u0026quot;Sound \u0026quot; + .baseName$\rTo Spectrogram: 0.005, 5000, 0.002, 20, \u0026quot;Gaussian\u0026quot;\rselectObject: \u0026quot;Spectrogram \u0026quot; + .baseName$\rSelect inner viewport: 1, 4, 1, 2.15\rPaint: .start, .end, 0, 5000, 100, \u0026quot;yes\u0026quot;, 50, 6, 0, \u0026quot;no\u0026quot;\rAxes: .start, .end, 0, 5000\rMarks left: 6, \u0026quot;yes\u0026quot;, \u0026quot;yes\u0026quot;, \u0026quot;no\u0026quot;\rText left: \u0026quot;yes\u0026quot;, \u0026quot;Frequency (Hz)\u0026quot;\rendproc\rThe draw_TextGrid function can be used together with draw_sound or draw_spectrogram to draw the waveform or spectrogram together with the annotation. To change the size of the window, I only need to modify two parameters (.start and .end). I can even write another procedure which draws the pitch of the sound:\nprocedure draw_pitch: .baseName$, .floor, .ceiling, .start, .end\r@smooth_pitch: .baseName$, .floor, .ceiling\rselectObject: \u0026quot;Pitch smooth\u0026quot;\rSelect inner viewport: 1, 4, 1, 2.15\rAxes: 0, .end - .start, 0, .ceiling\rLine width: 3\r#Font size: 14\rColour: \u0026quot;Blue\u0026quot;\rDraw: .start, .end, 0, .ceiling, \u0026quot;no\u0026quot;\rLine width: 1\rColour: \u0026quot;Black\u0026quot;\rMarks right: 4, \u0026quot;yes\u0026quot;, \u0026quot;yes\u0026quot;, \u0026quot;no\u0026quot;\rText right: \u0026quot;yes\u0026quot;, \u0026quot;Pitch (Hz)\u0026quot;\rendproc\rThe procedure even calls another procedure within it. It is this modular design that enables me to do complex things with Praat. The main structure remains highly readable. For example, to draw the waveform, spectrogram, pitch and annotation together, I only need to call these precedures in turn.\n@draw_spectrogram: baseName$, start, end\r@draw_tg: baseName$, start, end\r@draw_pitch: baseName$, floor, ceiling, start, end\rIt is like lego, that we can put simple pieces into amazing things.\nThe structure of a script Most of the Praat scripts are written to do batch tasks. Therefore, a general structure of script can be abstracted.\nTo do a batch job, a script can be decomposed into the following parts:\nan I/O interface to the user: a form in Praat terms; a series of files/directories to be processed: a String in Praat terms; some thing to do to the files/directories: a procedure in Praat terms. People usually write a for loop and put all the things to do within it. This approach is not modular and reproducible. As illustrated in the previous section, to decompose the things to do into clearly-defined steps and wrap them using procedure can be useful. The functionality of a procedure can be easily used by other scripts, and it increases the reusability of codes.\nI included a script_strcture.praat script in this repo. It serves as a template for scripting. Simply add procedures at the end of the script and put them into the for loop. This saves a lot of typing.\nConventions of writing Praat scripts To keep code clean easy to understand, it is good to maintain a consistent style. For R, there is the famous style guide by Hadley Wickham, and for Python, there is PEP 8. I apply some simple conventions to Praat scripting.\nWhen scripting in Praat, I keep some these conventions:\ncamel case for variable names: baseName$; snake case for procedure names: draw_waveform. To keep procedures modular, I use consistent and meaningful variable names across all scripts. Some frequent variables are listed below:\nbaseName$: the name of sound files or TextGrid files without extensions. It\u0026rsquo;s used to refer to objects in Praat editors; extension$: the file extension. It can also be fileList$: the name of the String of file in Praat. Of course you can have your own conventions, but make sure to keep them consistent. For other style options, I always refer to the style guides of R and Python.\nI put some of the scripts I wrote in this repository, and I will keep updating.\nResources of praat scripts Praat Scripting Tutorial; Praat Script Resources; Praat scripts in the NCSU phonetics lab; Using Praat for Linguistic Research. ","permalink":"https://ge-chunyu.github.io/posts/2019-12-praat/","series":[],"tags":["Praat"],"title":"Writing Praat scripts in a modular way"},{"authors":[],"categories":[],"content":"Pandoc是转换文本格式的利器。在用 Pandoc 转换中文文档和生成大型文档时，例如用中文写作毕业论文等时，会遇到一些很麻烦的问题。我在前面的博客里说过我在用 Markdown 写博士毕业论文，这篇博客就我自己的经验讲一下在用 Pandoc 生成大型中文文档的痛点与解决方案。\nPandoc 将 Markdown 生成 pdf 的逻辑 用 Pandoc 将 Markdown 文件生成 pdf，其实是先把 Markdown 格式转换成 LaTeX 格式，再通过 LaTeX 把转换后的 LaTeX 文件生成最终的 pdf 文件。在用 LaTeX 生成 pdf 时，可以指定不同的--pdf-engine，可选的选项有pdflatex、xelatex、lualatex等。\n因为 Pandoc 是通过 LaTeX 来生成 pdf 文件的，所以可以通过修改或添加 LaTeX 源文件来修改最终的 pdf 格式。如果不怕麻烦，可以先用 Pandoc 把 Markdown 文件转换成 LaTeX，再在上面自己改格式。\npandoc --standalone test.md -o test.tex\r但是，一般的做法是通过给 Pandoc 传递 LaTeX 命令和 Pandoc 自带的参数来修改 pdf 格式的。当然，也可以直接在 Pandoc 的 pdf template 上进行修改。不过 Pandoc 自带的 template 很复杂，一般用--header-includes给自带的 template 加上需要的 LaTeX 命令就可以了。\n另外，Pandoc 自身也提供来一些可以自定义的参数，这些参数一般是在文件开头用 yaml 写的，Pandoc 将这些参数称作“metadata”。所以在用 Pandoc 生成一个自定义格式的大型 pdf 文档时，除了文本文档外，还需要准备preable.tex与metadata.yaml两个文件，分别用来自定义 LaTeX 与 Pandoc 自带的参数。\n用 Pandoc 生成中文 pdf 要在 Pandoc 生成的 pdf 里显示中文，跟在 LaTeX 里显示中文的逻辑一样，一般用ctex包或xeCJK包就可以了。不过不建议用ctex包，因为它除了显示中文外还定义了太多其他格式。不如直接用xeCJK来显示中文，再直接用 LaTeX 提供的其他包来指定其他格式。\n用pandoc来生成中文 pdf 时，需要将默认的--pdf-engine改成xelatex：\npandoc --pdf-engine=xelatex test.md -o test.pdf\r用pandoc生成大型文档 在用 LaTeX 写作大型文档时，可以用\\include{}来包含单个文件。在用Markdown写大型文档时，用Pandoc将多个Markdown文件转换成一整个文件时，可以将文件名按顺序放在pandoc命令中进行转换。必须注意的是，要保证生成的文件是按需要的顺序出现的，需要把Markdown文件按照顺序命名，例如第一章的文件名是1.md，第二章为2.md等。\npandoc --pdf-engine=xelatex 1.md 2.md 3.md -o main.pdf\r在用这个命令生成大型文档的时候，可能会出现后一个文件变成前一个文件一部分的情况。要避免出现这种情况，必须在每个文档文本后加一个空行。\n另外一个问题是，在Markdown中的标题用pandoc生成默认是不编号的。要给标题编号，需要在yaml文件中加上以下这行。\nnumbersections: true\r在用单个Markdown文件写作文章时，可以把yaml参数加在文本上方；但在用多个Markdown文件写作时，最好将yaml参数单独保存成一个文件，在pandoc命令中以--metadata-file来指定该文件就可以了。\npandoc --pdf-engine=xelatex --metadata-file=metadata.yaml 1.md 2.md 3.md -o main.pdf\r交叉引用 写作大型文档时，尤其是技术或学术文档时，难免要对图表、公式、章节等进行交叉引用。Pandoc 本身提供了对不同部分进行交叉引用的功能。\nPandoc 本身并没有提供对图表进行交叉引用的功能。要实现这种功能，可以用过滤器--filter来实现。在MacOS上，可以用pandoc-crossref来处理图表、公式的编号与交叉引用；在Windows平台上，对图片、表格、公式的交叉引用可以分别用pandoc-tablenos、pandoc-fignos、pandoc-eqnos来实现。这几个过滤器可以用以下表格中的命令来安装1。\nfilter OS installation pandoc-crossref MacOS brew install pandoc-crossref pandoc-tablenos Windows pip install pandoc-tablenos pandoc-fignos Windows pip install pandoc-fignos pandoc-eqnos Windows pip install pandoc-eqnos 在 Pandoc 中使用过滤器只要用--filter参数指定所要用的过滤器即可。这几个过滤器的使用逻辑都是一致的，可以设置的参数包括图表标题前缀（tableTitle或figureTitle等）、文中引用前缀(tabPrefix或figPrefix)等。其他具体参数可以参考各自的说明文档。\n至此，Pandoc 命令就变成了以下这样（以 MacOS 为例）：\npandoc --pdf-engine=xelatex --filter pandoc-crossref --metadata-file=metadata.yaml 1.md 2.md 3.md -o main.pdf\r章节目录 在 LaTeX 中要对特定的标题不编号，可以用\\chapter{}等命令中加*来实现。Pandoc 也提供了这种功能。对于不想编号的标题，标题后面加上{-}或者{.unnumbered}就可以。\n要在生成的文件中自动生成目录，只需要将toc这一参数指定为true就可以。文档中包含的表格与图片等也可以自动生成目录，分别将lot和lof指定为true就可以了。但是，在 Pandoc 里可以指定目录的标题，例如toc-title: 目录，但是表格目录与图片目录的标题没法指定。这个问题可以用 LaTeX 来解决，只要在 LaTeX head 里指定表格目录与图片目录标题就行了：\n\\renewcommand\\listtablename{表\\ 格\\ 目\\ 录}\r\\renewcommand\\listfigurename{图\\ 片\\ 目\\ 录}\r在用 LaTeX 定义章节等标题格式时，经常会用到titlesec这一 LaTeX 包。但是，在head里指定了这个包之后，运行 Pandoc 会出现这样的错误信息：\nError producing PDF.\r! Argument of \\paragraph has an extra }.\r\u0026lt;inserted text\u0026gt; \\par l.1628 \\ttl@extract\\paragraph\r要解决这个问题，必须在yaml文件里加上subparagraph: yes这一行。\nyaml文件参数与含义 前面涉及到了很多yaml文件里的参数。这里将常见的yaml参数条列如下，并简单说明各自的作用。\ntitle: 标题 # 指定标题\rauthor: 作者 # 指定作者\rnumbersections: true # true 表示给文中的部分编号，默认值为 false\rsubparagraph: yes # 要在 LaTeX head 里用 titlesec 这个包，必须加这一行\rfontsize: 12pt # 指定字号大小，默认接受10pt、11pt、12pt\rtoc: true # 生成目录\rtoc-title: \u0026quot;目录\u0026quot; # 指定目录标题\rlot: true # 生成表格目录\rlof: true # 生成图片目录\rtableTitle: \u0026quot;表\u0026quot; # 表格标题的前缀，pandoc-crossref 与 pandoc-tablenos 中可用\rfigureTitle: \u0026quot;图\u0026quot; # 图片标题的前缀，pandoc-crossref 与 pandoc-fignos 中可用\rtabPrefix: \u0026quot;表\u0026quot; # 文中对表格引用的前缀，pandoc-crossref 可用\rfigPrefix: \u0026quot;表\u0026quot; # 文中对图片引用的前缀，pandoc-crossref 可用\rheader-includes: # 要加进 LaTeX文件的命令，建议放在一个单独的 preamble 文件里\r其他 Pandoc 资料 网上有很多其他非常好的 Pandoc 资料，例如：\nCustomizing pandoc to generate beautiful pdfs from markdown Generating Beautiful PDF from Markdown with Pandoc and Sublime Text 在Windows里的两个过滤器都是用Python的包管理器pip来装的。所以要装这两个过滤器，要先装Python。除了这里给的命令之外，还可以用python -m pip install packageName来装python第三方包。关于pip install与python -m install的差别，参见https://snarky.ca/why-you-should-use-python-m-pip/。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","permalink":"https://ge-chunyu.github.io/posts/2019-11-pandoc-large-document/","series":[],"tags":["Pandoc"],"title":"用pandoc生成大型中文文档的痛点与解决方案"},{"authors":[],"categories":[],"content":"I am writing my PhD thesis and instead of using LaTeX, I want to write it in markdown together with Pandoc. This has several merits. I can easily transform the markdown file to docx for my supervisor to revise. It can also easily be transformed to pdf files through LaTeX. However, the default pdf output doesn\u0026rsquo;t conform to the format my school requires. What I am going to do is to customize the pdf format to meet the standard of my school.\nThere is another problem in customizing the pdf output. Since I write the thesis in Chinese, how to modify the fonts and other character-related features does not seem to be obvious. To customize the format of the bibliography is an even greater problem.\nAs a matter of fact, there are two ways to customize the pdf output of Pandoc. The first is using a LaTeX template. Another is to use the --header option in the Pandoc command. I will concentrate on the latter approach and maybe a later post will deal with the first.\nThe format My graduate school does not specify strictly every detail of the format. The main requirements are :\nThe font size of the main matter is 10.5 point, or in No.5 (五号字); The margin for the paper is 2.54 cm for top and bottom, and 3.17 cm for left and right; The space of the main matter is 20 pound; The font of the Chapter and Section header is in Heiti（黑体） and the number in Chinese character; The font of the Subsection and below is in Kaishu (楷书) and the number in arabic number; The footnote is in the format of ①, ②, and is numbered by page. The font size of footnote is 9 point; The font size of the captions of figures and tables is 9 point. The requirements are not too detailed, so I think a preamble file will suffice.\nGeneral format The setting of the general format is straightforward. I will use geometry to set the page margin and setspace for line spacing.\nPage margin To set the page margin, simply use the package geometry and add the corresponding command in the preamble part.\n\\usepackage{geometry}\r\\geometry{top=2.54cm, bottom=2.54cm, left=3.17cm, right=3.17cm}\rThis sets the margin for top and bottom to 2.54cm, and 3.17cm for left and right.\nLine spacing Set line spacing is also straightforward using the setspace package.\n\\usepackage{setspace}\r\\linespread{1.5}\rThe format of chapters and sections The general format of chapters and sections can be customized using the titlesec package.\n\\titleformat{\\chapter}{\\centering\\Large\\heiti}{第\\zhnum{chapter}章}{1em}{}\r\\titleformat*{\\section}{\\centering\\Large\\heiti}\r\\titleformat*{\\subsubsection}{\\kaiti}\rThe above commands set the font of chapters and sections to \\heiti(黑体) and that of subsubsections to \\kaiti.\n\\renewcommand\\thesection{第\\zhnum{section}节}\r\\renewcommand\\thesubsection{\\zhnum{subsection}、}\r\\renewcommand\\thesubsubsection{（\\zhnum{subsubsection}）}\rFont The xeCJK package provides the support of font for Chinese characters. The fonts I need are Heiti and Kaiti, while SimSun is chosen as the main font. To achieve these, I first set the main font for CJK characters to SimSun.\n\\usepackage{xeCJK}\r\\setmainfont{Times New Roman}\r\\setCJKmainfont{SimSun}\rI also set the font for Roman alphabets to Times New Roman using the function \\setmainfont provided by the fontspec package. Note that I didn\u0026rsquo;t import the package explicitly, since it is refered in the xeCJK package.\nA more serious problem is to specify font for some of the text while not affecting the main font. In this case, xeCJK has a function \\setCJKfamilyfont, and I use it to define a command that specify the text included in the braces.\n\\newcommand{\\kaiti}{\\setCJKfamilyfont{kaiti}{KaiTi} \\CJKfamily{kaiti}}\r\\newcommand{\\heiti}{\\setCJKfamilyfont{heiti}{SimHei} \\CJKfamily{heiti}}\rI defined \\kaiti and \\heiti based on the built-in font of xeCJK. To specify the font of any text, simply put it in the brace as a plain LaTeX command: \\kaiti{楷体} or \\heiti{黑体}.\nFootnote To number footnote by page, I use the option perpage in the footmisc package.\n\\usepackage[perpage]{footmisc}\rTo mark footnotes with circled numbers, I searched online and found the pifont package provides such symbols. What I have to do is to redefine the \\footnote command such that it uses the circled numbers.\n\\usepackage{pifont}\r\\renewcommand{\\thefootnote}{\\ding{\\numexpr171+\\value{footnote}}\rThe pifont package provides a lot of symbols, which can be viewed on its quick reference. To use other symbols, simply change the number corresponding to the symbol.\nThe font size Since the requirement of the format is mixed (It uses Number for body and headings, but points for footnotes and captions), I will use 11pt to approximate No.5 font size in Chinese. Using this specification, 9pt can be defined using the \\footnotesize command, and No.2 size (21pt) can be defined using the \\huge command. As for the size of captions, I use the caption package.\n\\usepackage{caption}\r\\captionsetup{font=footnotesize}\rOutput to pdf using pandoc To put it all together and store the settings in a file named preable.tex, the markdown file can be output to pdf files in the desired form using pandoc.\npandoc --pdf-engine=xelatex -H preamble.tex thesis.md -o thesis.pdf\rWhen running the command, an error occured:\nError producing PDF.\r! Argument of \\paragraph has an extra }.\r\u0026lt;inserted text\u0026gt;\r\\par\rl.1628 \\ttl@extract\\paragraph\rI searched and this post in Stack Overflow solves the problem. Simply add subparagraph: yes to the header of the markdown file, and the pdf file can be generated. Another tip is to add numbersections: true to the header to automatically generate numbered sections.\nTo do Despite all these effort, another serious problem remain untouched. Citation and bibiliography. To simply cite and generate bibliography in LaTeX is effortless through BibTex. But to generate bibliography in desired Chinese format is a hard problem. I will explore this question later on.\nIn fact, I do have a good idea on how to solve this problem. Pandoc provides a powerful tool called csl. To generate bibliography in Chinese format, there are three files to choose from:\nchinese-gb7714-1987-numeric.csl; chinese-gb7714-2005-numeric.csl; chinese-gb7714-2005-author-date.csl. I can follow this line, but the output is not so satisfying, and I decided to do some research in native LaTeX on how people solve this problem.\n","permalink":"https://ge-chunyu.github.io/posts/2019-10-customizing-pdf/","series":[],"tags":["Latex","Pandoc"],"title":"Customizing pdf output of Pandoc"},{"authors":[],"categories":[],"content":"I want to do some text mining practices on the texts of Luxun(鲁迅), a great Chinese writer. The first step is to get all the texts by Luxun, and I have no time typing all the texts word by word. So I decided to srape the texts from an online source.\nSource of the texts The texts of Luxun are scraped from 子夜星网. As it claimed, it contains all the texts in the Complete works of Luxun(鲁迅全集). I checked it, and so it did.\nGet the urls and titles of all the articles The process starts at getting the contents and the urls of the text of Luxun from the parent url http://www.ziyexing.com/luxun/. To access all the urls, I constructed a regular expression and selected all a nodes that share the pattern.\nhomepage_res = requests.get(\u0026quot;www.ziyexing.com/luxun/\u0026quot;)\rhomepage_soup = BeautifulSoup(res.text, \u0026quot;html.parser\u0026quot;)\rhref_re = re.compile(r\u0026quot;luxun_\\w+_\\w+_\\d+.htm\u0026quot;)\rhrefs = homepage_soup.find_all(\u0026quot;a\u0026quot;, {\u0026quot;href\u0026quot;:href_re})\rIt is found that although the regular expression covers most of the patterns, some urls are idiosyncratic and do not conform to the regex. I constructed another regex.\nothers_re = re.compile(r\u0026quot;(zhunfengyuetan)|(gushixinbian)|(gujixubaji)|(zgxssl)|(luxun_shici)\\w+\u0026quot;)\rother_hrefs = homepage_soup.find_all(\u0026quot;a\u0026quot;, {\u0026quot;href\u0026quot;:others_re})\rIt is, of course, idiosyncratic, but effective. To use two regexes, I have got all the urls.\nlinks = [href.attrs[\u0026quot;href\u0026quot;] for href in hrefs]\rother_links = [line.attrs[\u0026quot;href\u0026quot;] for line in other_hrefs]\rThe title of each url can also be accessed in the a nodes. It can easily accessed using a.text, yet another problem appeared. The most notorious problem in dealing with non-Latin alphabet languages, especially Chinese, is the problem of encoding. When applying a.text, the characters did not show normally. I am fortunately enough to have recently learnt that the encoding of an html page can be seen from the header of the page. I checked it and found that the page is encoded using gb2312. To make the texts return to normal requires encoding in Latin1 and subsequently decoding in gb2312. gbk, as a superset of gb2312, works better in decoding.\ntitles = [href.text.encode(\u0026quot;latin1\u0026quot;).decode(\u0026quot;gbk\u0026quot;) for href in hrefs]\rother_titles = [line.text.encode(\u0026quot;latin1\u0026quot;).decode(\u0026quot;gbk\u0026quot;) for line in other_hrefs]\rHave got all the urls and corresponding titles, I can proceed to the next step, to scrape all the articles. A brief inspection of the article page show that all the contents of the article are embedded in the p node with property line-height: 150%. A further inspection of other pages show that the line-height can also be 130%. So another regex is needed here.\nps_re = re.compile(r\u0026quot;line-height: 1\\d0%\u0026quot;)\rGet the texts Put all the pieces together, I wrote several functions to make the process modular and easy to understand.\nThe get_soup function accesses the given url and returns the BeautifulSoup object.\ndef get_soup(base_url, url):\rres = requests.get(base_url + url)\rsoup = BeautifulSoup(res.text, \u0026quot;html.parser\u0026quot;)\rreturn soup\rThe get_ps function accepts the soup object and outputs the p nodes, which contain the texts.\ndef get_ps(soup):\rps_re = re.compile(r\u0026quot;line-height: 1\\d0%\u0026quot;)\rps = soup.find_all(\u0026quot;p\u0026quot;, {\u0026quot;style\u0026quot;:ps_re})\rreturn ps\rThe clean_text function accepts the p nodes and outputs the cleaned text.\ndef clean_text(texts):\rtexts_decoded = [text.encode(\u0026quot;latin1\u0026quot;, \u0026quot;ignore\u0026quot;).decode(\u0026quot;gbk\u0026quot;, \u0026quot;ignore\u0026quot;) for text in texts]\rtexts_decoded = [text.strip() for text in texts_decoded]\rcleaned_texts = [text for text in texts_decoded if text != \u0026quot;\u0026quot;]\rreturn cleaned_texts\rThe write_text function writes the text data in txt fromat in a file named after the title of the article.\ndef write_text(clean_text, titles, n):\rwith open(\u0026quot;luxun/\u0026quot; + titles[n].strip() + \u0026quot;.txt\u0026quot;, \u0026quot;w\u0026quot;, encoding=\u0026quot;utf8\u0026quot;) as file:\rfile.write(\u0026quot;\\n\u0026quot;.join(clean_text))\rTo wrap all these function together, I wrote a main function which do all these stuff at once.\ndef main(links, titles):\rfor i in range(len(links)):\rsoup = get_soup(base_url, links[i])\rps = get_ps(soup)\rtexts = ps[0].text.split(\u0026quot;\\n\u0026quot;)\rcleaned_texts = clean_text(texts)\rwrite_text(cleaned_texts, titles, i)\rtime.sleep(3)\rTo avoid too much traffic for the site, I used the time.sleep function to pause for three seconds between urls.\nRunning the main() function, and I got all the articles posted on 子夜星网 by Luxun in one folder.\nKey points There are some traps in this toy project, some of which are interesting. I list some key points below.\nUse a regex to capture the pattern of the desired urls; If a regex can not exhaust the pattern, write another one; Look for encoding schemes in the header of html files; Latin-1 works great for Chinese characters! Use text.encode('latin1').decode('gbk'). ","permalink":"https://ge-chunyu.github.io/posts/2019-10-12-scraping-luxun/","series":[],"tags":["Python","Web-Scraping"],"title":"Scraping all the texts of Luxun(鲁迅) from the Internet using Python (用Python爬取《鲁迅全集》)"},{"authors":[],"categories":[],"content":"This post explains how to write academic papers using Sublime Text 3 in markdown format and transform the .md file into .docx and pdf files using pandoc.\nPrerequisites To write academic papers in markdown format requires a markdown editor, a format trnasformer, maybe also a literature manager. I use Sublime Text 3 as the markdown edit, Pandoc as the format transformer, and Zotero as the literature manager. This section lists the things we need.\nSublime Text 3 and plugins Sublime Text 3 is a text editor that can be used for code, markup and prose. It is lightweight and is suitable for long texts. The followings are several plugins (or packages) we need:\nMarkdownEditing: writing markdown in Sublime Text 3; MarkdownPreview: previewing markdown in the browser; SmartMarkdown: folding and unfolding Headings; Citer: citing from a bibtex file; AcademicMarkDown: highlighting citations and CriticMarkup; WordCount: counting words and characters; CriticMarkup: highlighting revisions (e.g. add, delete, substitute, and comment). To install packages in Sublime Text 3, first install Package Control (go to Preferences -\u0026gt; Install Package Control). Use Ctrl+Shift+P to activate the package control palatte, type Install Packages, select and then enter the names of whatever packages you want to install.\nPandoc Pandoc is a powerful tool for transforming file formats. Installing it on windows by downloading the .exe file or installing it in MacOS by simply typing brew install pandoc and brew install pandoc-cite-proc in the Terminal (given that you have installed HomeBrew).\nUsage This section explains how 1) to use Sublime Text 3 to complete tasks like adding citations, 2) to tranform .md files to .docx and pdf files.\nSublime Text 3 and plugins It is common tasks to add citations, insert tables, and insert figures when writing academic papers. Sublime Text 3, along with various packages, provides us with powerful tools to compelete such tasks.\nAdding citations use Citer Once we have installed Citer via Package Control, we can modify the settings of Citer. Add the following lines into the user settings (Preferences -\u0026gt; Package Settings -\u0026gt; Citer -\u0026gt; Citer Setting-User), and change the \u0026ldquo;bibtex_file_path\u0026rdquo; parameter according to the path of your bibtex files. Multiple bibtex files can be add to the bibtex_file_path separated by a comma and surrounded with brackets ([]).\n{\r//REQUIRED:\r\u0026quot;bibtex_file_path\u0026quot;: \u0026quot;your bibtex path\u0026quot;,\r//OPTIONAL:\r//By default Citer Search looks for your keyword in the //author, title, year, and Citekey (id) fields\r\u0026quot;search_fields\u0026quot;: [\u0026quot;author\u0026quot;, \u0026quot;title\u0026quot;, \u0026quot;year\u0026quot;, \u0026quot;id\u0026quot;] ,\r//Default format is @Citekey\r\u0026quot;citation_format\u0026quot;: \u0026quot;@%s\u0026quot;,\r//list of scopes. Could be top level \u0026quot;text\u0026quot; or \u0026quot;source\u0026quot;, or limit to\r// e.g \u0026quot;text.html.markdown\u0026quot;\r\u0026quot;completions_scopes\u0026quot;: [\u0026quot;text\u0026quot;],\r\u0026quot;enable_completions\u0026quot;: true\r}\rSave the setting file. Type Ctrl-Shift-P and the Package Control palette pops up. Type show all, and select the command Citer: Show all, all the entries in the bibtex files should pop up. Select the entry you would like to cite, and press Enter. The entry appears in the file in this form @author1990 (@authorYear).\nPandoc Use Pandoc is easy and to modify the templates is rather challenging, especially if you wish to modify the LaTeX template. It implies that you know fairly well about LaTeX. To make Pandoc compatible with Chinese characters is another challenging task. Pandoc is a command line tool, so make sure you enter all the commands in the terminal (or cmd in Windows)\nTransformation between .md, .docx, and pdf files Transforming .md files into .docx and .pdf files is straightforward. Go to the path where your .md files are, and type in the following commands:\ncd path # change directory to where your md files are pandoc file.md -o file.pdf # md -\u0026gt; pdf\rpandoc file.md -o file.docx # md -\u0026gt; docx\rAdding references Adding references to a markdown file is also straightforward, simply use the pandoc-citeproc program, and specify the path of the bibtex file:\n# md -\u0026gt; pdf\rpandoc --filter pandoc-citeproc --bibliography=file.bib file.md -o file.pdf\r# md -\u0026gt; docx\rpandoc --filter pandoc-citeproc --bibliography=file.bib file.md -o file.docx\rUsing templates You can output .md files to .docx and pdf files with various formats by modifying the default templates (Please also refer to the Pandoc User\u0026rsquo;s Guide).\nModify the default docx template To modify the default docx template, first print the default dicx template used by Pandoc with the following command:\npandoc --print-default-data-file reference.docx \u0026gt; custom-reference.docx To modify the default docx reference file, it does not work to simply change the style of the contents. Rather, define the styles you would love to use in the Style options provided by MS Word.\nTo use the sepcifies reference file:\npandoc file.md -o file.docx --reference-doc=custom-reference.docx\rModify the default LaTeX template Make pandoc compatible with Chinese (Pandoc的中文输出) To make pandoc compatible with Chinese, we have to specify the pdf engine and the font (this is not required when transforming to .docx):\npandoc --pdf-engine=xelatex -V mainfont=\u0026quot;SimSun\u0026quot; file.md -o file.pdf To use whatever font you like, type in the font name after mainfont=. To know what fonts you have in your laptop, type fc-list :lang=zh in Windows cmd, or look up in Font Book in MacOS.\nThere is another serious problem with Chinese pdf files created with pandoc. It cannot automatically change line. So a Chinese pdf file simply spans beyond the range of the current file. To overcome this problem, we need to modify the default LaTeX template.\n","permalink":"https://ge-chunyu.github.io/posts/2019-10-11-sublime-pandoc/","series":[],"tags":["Pandoc","Sublime Text"],"title":"Writing academic papers using Sublime Text 3 + Pandoc"},{"authors":[],"categories":[],"content":"希腊的盲诗人荷马写下了《伊利亚特》，以阿喀琉斯的愤怒为线索，讲述了特洛伊战争最后一年的战况；而这场战争是由美女海伦引起的。在同一时期的中国，著名的盲人史学家左丘明也记录了数场由美女夏姬引发的战役，而以申公巫臣的愤怒为线索。在此之前，还有详细的背景交代，充满戏剧色彩，称得上是《左传》中最惊心动魄的故事之一。\n《左传》中最早说到夏姬，是在宣公九年：\n陈灵公与孔宁、仪行父通于夏姬，皆衷其衵服，以戏于朝。\n三个人都露出夏姬做的内衣，还相互打趣。泄冶看不下去，勇敢进谏，献出了宝贵的生命。\n到了宣公十年：\n陈灵公与孔宁、仪行父饮酒于夏氏。公谓行父曰：“征舒似女。”对曰：“亦似君。”征舒病之。公出，自其厩射而杀之。二子奔楚。\n这三位与夏姬通奸，不以为耻，反以为荣，还拿夏姬的二子夏征舒开玩笑。夏征舒受不了，就只好弑君了。剩下那两位居然就吓得逃到了楚国。不过，弑君也不是小事，孔宁、仪行父跑到楚国，楚王也不能没有表示，到了宣公十一年：\n楚子为陈夏氏乱故，伐陈……杀夏征舒……纳公孙宁、仪行父于陈。\n后面还有史臣的评价：“书，有礼也。”\n到了成公二年，左丘明开始回忆这一场战役产生的后果：\n庄王欲纳夏姬，申公巫臣曰：“不可……今纳夏姬，贪其色也。贪色为淫，淫为大罚……”王乃止。\n楚庄王也想纳夏姬。这时，申公巫臣跳出来说不行，还讲了一通大道理。楚王就作罢了。一般人肯定以为这个申公巫臣是个好人，但事实并非如此。古人说：“周公恐惧流言日，王莽谦恭未篡时。”且看下文：\n子反欲取之，巫臣曰：“是不祥人也。……人生实难，其有不获死乎？天下多美妇人，何必是？”子反乃止。\n巫臣既阻止了楚王纳夏姬，又不让子反娶夏姬，而且用的都是极其冠冕堂皇的理由。然而，这样就结束了吗？并不：\n王以予连尹襄老，襄老死于邲。其子黑要烝焉。\n楚王把她给了连尹襄老，而连尹襄老也果然在邲之战中战死了，连尸体都找不到。而与此同时，襄老的儿子也跟夏姬通奸了（下淫于上谓之烝）。\n此时巫臣又出场了。他自告奋勇为夏姬找她丈夫的尸体：\n……使自郑召之曰：“尸可得也，必来逆之。”\n尸体找得到，但是得夏姬亲自来才行：“（夏姬）将行，谓送者曰：“不得尸，吾不反矣。”与此同时，巫臣也有了进一步动作：“（共王）使巫臣聘于齐，巫臣尽室以行。”\n不过是聘于齐，为什么要举家前往呢？于是巫臣的儿子申叔就跪在地上，请求跟从，道出了其中玄机：“夫子有三军之惧，而又有桑中之喜，宜将窃妻以逃者也。”\n知父莫若子啊！申叔一下就说出来关键：桑中之喜。桑中是《诗经·卫风》中的篇名，“期我乎桑中，要我乎上宫，送我乎淇之上矣！”郑卫之声淫，明明是一首淫奔之曲。于是巫臣就带着夏姬走了。\n夏姬的故事基本上就结束了。与夏姬有染的男人有：陈灵公、孔宁、仪行父、襄老、襄老的儿子黑要、巫臣；而想要和她有染的有：楚王，子反。这只是《左传》中记载了的，没有记载的更不知凡几，真可称得上是“人尽可夫”了（这又是《左传》里的典故）！在这里面，巫臣为了和夏姬在一起，真可谓是费尽了心思。先是用冠冕堂皇的理由阻止了楚王和子反，再又是等到襄老死了（这件事巫臣或许也与有力焉？）之后又极其高尚地主动为夏姬找寻丈夫的尸骨。末了，还申请聘于齐，终于与夏姬比翼双飞。通过巫臣的所作所为，不难发现：这才是真爱啊！！\n可以想象一下楚王、子反知道这件事的反应，恐怕是再怎么震惊都不为过的。可惜楚王早就死了，子反却活到了这会儿。知道这件事后，子反开始谋划报复巫臣。正巧子重与巫臣也有郤。邲之战的时候，子重请求楚王封赐申、吕，被巫臣坏了好事，自然怨恨巫臣。二人一拍即合。于是杀了巫臣在楚国的同族子阎、子荡，顺带把黑要也杀了。随即就“而分其室”，把他们的老婆给分了。\n巫臣得知这件事后，当然非常愤怒。不过，他终究不是阿喀琉斯，即便在这时，还有清醒的意识，写了封信给他们：“尔以谗慝，贪婪事君，而多杀不辜，余必使尔罢于奔命而死！”\n巫臣的复仇计划异常完美，但也引发了严重的后果，甚至影响到了自此之后春秋时期的历史。他的计划是使吴国强大，征伐楚国（这和伍子胥的复仇计划多么相像！就连复仇对象和复仇所依托的国家都一样！）。后果是：“吴始伐楚、伐巢、伐徐，子重奔命，马陵之会，吴入州来，子重自郑奔命。子反、子重于是一岁七奔命。”\n巫臣的确使他们罢于奔命了。但还有另外的、更大的影响：“蛮夷属于楚者，吴尽取之，是以始大，通吴于上国。”正是吴的崛起，影响了之后春秋的历史。\n而子反、子重二人的结局呢？子反死于成公十六年楚国与晋国的鄢陵之战，而子重更是因与吴国作战失利：“楚人以是咎子重，遂遇心疾而卒。”\n由夏姬一个女人，竟然最后影响了整个春秋的历史，将其比为海伦毫不为过；而巫臣的愤怒引起了吴国的崛起，比为阿喀琉斯也毫不逊色。\n","permalink":"https://ge-chunyu.github.io/posts/2013-08-04-illiad-of-china/","series":[],"tags":["History"],"title":"中国的《伊利亚特》"}]